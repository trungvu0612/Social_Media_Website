{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/Subject.ts","../src/utils/unset.ts","../src/utils/isFileInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/omitKeys.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/Subject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: SubjectType<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  Path,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      (!_name.current ||\n        !formState.name ||\n        convertToArrayPayload(_name.current).includes(\n          formState.name as Path<TFieldValues>,\n        )) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) || isValid !== _formState.isValid ? {} : { name }),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(\n                          (ref) => isHTMLElement(ref) && document.contains(ref),\n                        ),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: ({ name }) => {\n      if (\n        !_name.current ||\n        !name ||\n        convertToArrayPayload(_name.current).some(\n          (currentName) =>\n            name &&\n            currentName &&\n            (name.startsWith(currentName as InternalFieldName) ||\n              currentName.startsWith(name as InternalFieldName)),\n        )\n      ) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","useRef","_updateSubscription","disabled","subject","subscribe","next","callback","updateSubscriptionProps","skipEarlySubscription","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","convertToArrayPayload","includes","shouldRenderFormState","_subjects","state","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","cloneObject","Set","isFunction","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","Subscription","this","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","isFieldWatched","isBlurEvent","watchAll","has","_updateValid","shouldSkipRender","resolver","executeResolver","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","_getWatch","isGlobal","fieldName","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","handleChange","shouldSkipValidation","deps","skipValidation","isWatched","parentNodeName","parentField","parentError","fieldNames","executeResolverValidation","Promise","all","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","_removeUnmounted","live","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","inputName","setError","setFocus","render","Provider","children","setFields","mapIds","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchField","startsWith","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl","currentName","updateValue"],"mappings":"+XAEgBA,GACG,aAAjBA,EAAQC,OCHMC,GAAkBA,aAAgBC,OCAlCC,GAAuD,MAATA,ECGvD,MAAMC,EAAgBD,GAAoC,iBAAVA,EAEvD,MAAkCA,IAC/BE,EAAkBF,KAClBG,MAAMC,QAAQJ,IACfC,EAAaD,KACZK,EAAaL,KCTAM,GAAiBA,EAAKC,UAAU,EAAGD,EAAKE,OAAO,SAAWF,ICI3D,CAACG,EAA+BH,IAC7C,IAAIG,GAAOC,KAAMC,GAAYC,EAAkBN,KAAUK,KCL3CX,GAAiBA,EAAMa,OAAOC,WCA9BC,QAA2CC,IAARD,ICKpC,CACbE,EACAC,EACAC,KAEA,GAAIC,EAASH,IAAQC,EAAM,CACzB,MAAMG,EAASC,EAAQJ,EAAKK,MAAM,cAAcC,OAC9C,CAACH,EAAQI,IAASvB,EAAkBmB,GAAUA,EAASA,EAAOI,GAC9DR,GAGF,OAAOS,EAAYL,IAAWA,IAAWJ,EACrCS,EAAYT,EAAIC,IACdC,EACAF,EAAIC,GACNG,IClBD,MAAMM,EACL,OADKA,EAEH,SAGGC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCtBZ,MAAe,CACbC,EACAL,KAEA,MAAMM,mBAAYD,GAGlB,cAFOC,EAAKN,GAELM,GCFT,MAAMC,EAAkBC,EAAMC,cAAoC,MAErDC,EAAiB,IAG5BF,EAAMG,WAAWJ,GCPnB,MAAe,CACbK,EACAC,EACAC,EACAC,GAAS,KAET,SAASC,EAAaC,GACpB,MAAO,KACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUd,IAC5BU,EAAgBI,IAASF,GAAUZ,GAErCW,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,IAMvB,MAAMrB,EAAS,GACf,IAAK,MAAMI,KAAOY,EAChBM,OAAOC,eAAevB,EAAQI,EAAK,CACjCoB,IAAKJ,EAAahB,KAItB,OAAOJ,KCzBOrB,GACdoB,EAASpB,KAAW2C,OAAOG,KAAK9C,GAAO+C,SCA1B,CACbC,EACAV,EACAE,KAEA,MAAMH,EAAYY,EAAKD,EAAe,QAEtC,OACEE,EAAcb,IACdM,OAAOG,KAAKT,GAAWU,QAAUJ,OAAOG,KAAKR,GAAiBS,QAC9DJ,OAAOG,KAAKT,GAAWc,KACpB1B,GACCa,EAAgBb,OACde,GAAUZ,OClBe5B,GACjCG,MAAMC,QAAQJ,GAASA,EAAQ,CAACA,GCkBlC,MAAMoD,EACJC,IAEIA,EAAa1C,UACf0C,EAAa1C,QAAQ2C,cACrBD,EAAa1C,aAAUK,aAgBXuC,EAAgBC,GAC9B,MAAMH,EAAepB,EAAMwB,SACrBC,EAAsBzB,EAAMwB,OAAa,QAE/CC,EAAoB/C,QAfpB,GAAM0C,aAAAA,EAAcG,MAAAA,KACpB,KACMA,EAAMG,SACRP,EAASC,GACCA,EAAa1C,UACvB0C,EAAa1C,QAAU6C,EAAMI,QAAQC,UAAU,CAC7CC,KAAMN,EAAMO,aASYC,CAAwB,CACpDX,aAAAA,EACAG,MAAAA,KAGDA,EAAMS,uBAAyBP,EAAoB/C,UAEpDsB,EAAMiC,UAAU,KACdR,EAAoB/C,UACb,IAAMyC,EAASC,IACrB,ICxCL,SAASc,EACPX,GAEA,MAAMY,EAAUjC,KACVkC,QAAEA,EAAUD,EAAQC,QAAOV,SAAEA,EAAQrD,KAAEA,GAASkD,GAAS,IACxDnB,EAAWiC,GAAmBrC,EAAMsC,SAASF,EAAQG,YACtDC,EAAuBxC,EAAMwB,OAAO,CACxCiB,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,IAEJC,EAAQ/C,EAAMwB,OAAOnD,GAoB3B,OAlBA0E,EAAMrE,QAAUL,EAEhBiD,EAAa,CACXI,SAAAA,EACAI,SAAW1B,KACP2C,EAAMrE,UACL0B,EAAU/B,MACX2E,EAAsBD,EAAMrE,SAASuE,SACnC7C,EAAU/B,QAEd6E,EAAsB9C,EAAWoC,EAAqB9D,UACtD2D,iCACKD,EAAQG,YACRnC,IAEPuB,QAASS,EAAQe,UAAUC,QAGtBC,EACLjD,EACAgC,EAAQ/B,gBACRmC,EAAqB9D,SACrB,YClCY4E,EAId/B,GAEA,MAAMY,EAAUjC,KACV7B,KAAEA,EAAI+D,QAAEA,EAAUD,EAAQC,QAAOmB,iBAAEA,GAAqBhC,GACvDxD,EAAOyF,GAAsBxD,EAAMsC,SACxC1B,EACEwB,EAAQqB,YACRpF,EACAuC,EAAIwB,EAAQsB,eAAgBrF,EAAMkD,EAAMrC,gBAGtCkB,EAAY8B,EAAa,CAC7BE,QAASA,GAAWD,EAAQC,QAC5B/D,KAAAA,IAEI0E,EAAQ/C,EAAMwB,OAAOnD,GAE3B0E,EAAMrE,QAAUL,EAEhBiD,EAAa,CACXK,QAASS,EAAQe,UAAUf,QAC3BN,SAAWjE,KACPA,EAAKQ,MAAQ0E,EAAMrE,UAAYb,EAAKQ,OACtCmF,EAAmB5C,EAAI/C,EAAK8F,OAAQZ,EAAMrE,YAG9C,MAAMkF,EAAgBxB,EAAQyB,SAASxF,iCAClCkD,EAAMuC,QACT/F,MAAAA,KAGIgG,EAAgB/D,EAAMgE,YAC1B,CAAC3F,EAAyBN,KACxB,MAAMkG,EAAerD,EAAIwB,EAAQ8B,QAAS7F,GAEtC4F,IACFA,EAAME,GAAGC,MAAQrG,IAGrB,CAACqE,IAsBH,OAnBApC,EAAMiC,UAAU,KACd8B,EAAc1F,GAAM,GAEb,KACL,MAAMgG,EACJjC,EAAQkC,SAASf,kBAAoBA,GAGrCgB,EAAmBnC,EAAQoC,OAAOC,MAAOpG,GACrCgG,IAA2BjC,EAAQsC,YAAYC,OAC/CN,GAEJjC,EAAQwC,WAAWvG,GAEnB0F,EAAc1F,GAAM,KAGvB,CAACA,EAAM+D,EAASmB,EAAkBQ,IAE9B,CACLE,MAAO,CACLY,SAAWC,IACT,MAAM/G,ECjFC,CAAC+G,GACd3F,EAAS2F,IAAWA,EAAgBC,OAChCC,EAAiBF,EAAgBC,QAC9BD,EAAgBC,OAAOE,QACvBH,EAAgBC,OAAOhH,MAC1B+G,ED4EgBI,CAAmBJ,GACjCtB,EAAmBzF,GAEnB6F,EAAciB,SAAS,CACrBE,OAAQ,CACNhH,MAAAA,EACAM,KAAMA,GAERT,KAAM8B,KAGVyF,OAAQ,KACNvB,EAAcuB,OAAO,CACnBJ,OAAQ,CACNhH,MAAAA,EACAM,KAAMA,GAERT,KAAM8B,KAGVrB,KAAAA,EACAN,MAAAA,EACAqH,IAAMC,IACJ,MAAMpB,EAAQrD,EAAIwB,EAAQ8B,QAAS7F,GAE/BgH,GAAOpB,GAASoB,EAAIC,QACtBrB,EAAME,GAAGiB,IAAM,CACbE,MAAO,IAAMD,EAAIC,QACjBC,kBAAoBC,GAClBH,EAAIE,kBAAkBC,GACxBC,eAAgB,IAAMJ,EAAII,qBAKlCrF,UAAAA,EACAsF,WAAY,CACVC,UAAW/E,EAAIR,EAAU0C,OAAQzE,GACjCoE,UAAW7B,EAAIR,EAAUsC,YAAarE,GACtCuH,YAAahF,EAAIR,EAAUuC,cAAetE,GAC1CwH,MAAOjF,EAAIR,EAAU0C,OAAQzE,KExHnC,MAAe,CACbA,EACAyH,EACAhD,EACAlF,EACA4H,IAEAM,iCAEShD,EAAOzE,KACV0H,qCACMjD,EAAOzE,IAASyE,EAAOzE,GAAO0H,MAAQjD,EAAOzE,GAAO0H,MAAQ,KAChEC,CAACpI,GAAO4H,IAAW,MAGvB,KCrBUzH,GAAkB,QAAQkI,KAAKlI,KCE/BmI,GACd7G,EAAQ6G,EAAMC,QAAQ,YAAa,IAAI7G,MAAM,mBCGvB8G,EACtBC,EACApH,EACAlB,GAEA,IAAIuI,GAAS,EACb,MAAMC,EAAWC,EAAMvH,GAAQ,CAACA,GAAQwH,EAAaxH,GAC/C6B,EAASyF,EAASzF,OAClB4F,EAAY5F,EAAS,EAE3B,OAASwF,EAAQxF,GAAQ,CACvB,MAAMtB,EAAM+G,EAASD,GACrB,IAAIK,EAAW5I,EAEf,GAAIuI,IAAUI,EAAW,CACvB,MAAME,EAAWP,EAAO7G,GACxBmH,EACExH,EAASyH,IAAa1I,MAAMC,QAAQyI,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,GADA,GAGRD,EAAO7G,GAAOmH,EACdN,EAASA,EAAO7G,GAElB,OAAO6G,EC1BT,MAAMS,EAAe,CACnBC,EACAjF,EACAkF,KAEA,IAAK,MAAMxH,KAAOwH,GAAetG,OAAOG,KAAKkG,GAAS,CACpD,MAAM9C,EAAQrD,EAAImG,EAAQvH,GAE1B,GAAIyE,EAAO,CACT,MAAME,EAAKF,EAAME,GACXzF,EAAUsC,EAAKiD,EAAO,MAE5B,GAAIE,GAAMrC,EAASqC,EAAG9F,MAAO,CAC3B,GAAI8F,EAAGiB,IAAIE,OAAS7F,EAAY0E,EAAGiB,IAAIE,SACrC,MACK,GAAInB,EAAG8C,KAAM,CAClB9C,EAAG8C,KAAK,GAAG3B,QACX,YAEOnG,EAAST,IAClBoI,EAAapI,EAASoD,MCvB9B,MAAe,CACbzD,EACAiI,EACAY,EAAiC,KAEjCA,EAAQC,aAAe1H,EAAYyH,EAAQC,aACvCD,EAAQE,WACR,GAAG/I,KAAQoB,EAAYyH,EAAQG,YAAcf,EAAQY,EAAQG,cAC7D,KCPS,CACb1D,EACA2D,EACAC,IAEA5D,EAAO6D,IAAI,CAACzJ,EAAOuI,KACjB,MAAMmB,EAASH,EAAU5I,QAAQ4H,GAEjC,sCACKvI,GACC0J,EAAS,CAAEzB,CAACuB,GAAWE,EAAuBF,IAAa,QCdtD,KACb,MAAMG,EACmB,oBAAhBC,YAA8B7J,KAAK8J,MAA4B,IAApBD,YAAYC,MAEhE,MAAO,uCAAuCzB,QAAQ,QAAU0B,IAC9D,MAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKG,SAAS,SCHtC,CAKbtE,EAAuC,GACvC4D,IAEA5D,EAAO6D,IAAKzJ,kCACNA,EAAMwJ,GAAW,GAAK,CAAEvB,CAACuB,GAAUW,MACpCnK,aCZiBoK,EAAUtK,EAAWE,GAC3C,MAAO,IAAIiF,EAAsBnF,MAAUmF,EAAsBjF,ICHnE,MAAmBA,GACjBG,MAAMC,QAAQJ,GAASA,EAAMyJ,IAAI,aAAmBzI,WCO9BqJ,EACtBvK,EACAyI,EACAvI,GAEA,MAAO,IACFF,EAAKwK,MAAM,EAAG/B,MACdtD,EAAsBjF,MACtBF,EAAKwK,MAAM/B,ICdlB,MAAe,CACbzI,EACAyK,EACAC,IAEIrK,MAAMC,QAAQN,IACZ4B,EAAY5B,EAAK0K,MACnB1K,EAAK0K,QAAMxJ,GAEblB,EAAK2K,OAAOD,EAAI,EAAG1K,EAAK2K,OAAOF,EAAM,GAAG,IACjCzK,GAGF,YCbe4K,EAAW5K,EAAWE,GAC5C,MAAO,IAAIiF,EAAsBjF,MAAWiF,EAAsBnF,ICapE,MAAe,CAAIA,EAAWyI,IAC5B7G,EAAY6G,GACR,GAdN,SAA4BzI,EAAW6K,GACrC,IAAIC,EAAI,EACR,MAAMC,EAAO,IAAI/K,GAEjB,IAAK,MAAMyI,KAASoC,EAClBE,EAAKJ,OAAOlC,EAAQqC,EAAG,GACvBA,IAGF,OAAOtJ,EAAQuJ,GAAM9H,OAAS8H,EAAO,GAMjCC,CACEhL,EACCmF,EAAsBsD,GAAoBwC,KAAK,CAACC,EAAGC,IAAMD,EAAIC,MCrBvD,CAAInL,EAAWoL,EAAgBC,KAC5CrL,EAAKoL,GAAU,CAACpL,EAAKqL,GAAUrL,EAAKqL,GAAUrL,EAAKoL,IAAU,MCDhD,CAAIE,EAAkB7C,EAAevI,KAClDoL,EAAY7C,GAASvI,EACdoL,GCFT,OAAgBpL,GACG,mBAAVA,WCEeqL,GAA+BvL,GACrD,IAAIiC,EACJ,MAAM3B,EAAUD,MAAMC,QAAQN,GAE9B,GAAIA,aAAgBC,KAClBgC,EAAO,IAAIhC,KAAKD,QACX,GAAIA,aAAgBwL,IACzBvJ,EAAO,IAAIuJ,IAAIxL,OACV,CAAA,IAAIM,IAAWgB,EAAStB,GAU7B,OAAOA,EATPiC,EAAO3B,EAAU,GAAK,GACtB,IAAK,MAAMqB,KAAO3B,EAAM,CACtB,GAAIyL,GAAWzL,EAAK2B,IAAO,CACzBM,EAAOjC,EACP,MAEFiC,EAAKN,GAAO4J,GAAYvL,EAAK2B,KAMjC,OAAOM,ECnBT,OAAgB/B,GACdE,EAAkBF,KAAWC,EAAaD,YCDpBwL,GAAUC,EAAcC,GAC9C,GAAIC,GAAYF,IAAYE,GAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAIrL,EAAaoL,IAAYpL,EAAaqL,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,MAAMC,EAAQlJ,OAAOG,KAAK2I,GACpBK,EAAQnJ,OAAOG,KAAK4I,GAE1B,GAAIG,EAAM9I,SAAW+I,EAAM/I,OACzB,OAAO,EAGT,IAAK,MAAMtB,KAAOoK,EAAO,CACvB,MAAME,EAAON,EAAQhK,GAErB,IAAKqK,EAAM5G,SAASzD,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,MAAMuK,EAAON,EAAQjK,GAErB,GACGpB,EAAa0L,IAAS1L,EAAa2L,IACnC5K,EAAS2K,IAAS3K,EAAS4K,IAC3B7L,MAAMC,QAAQ2L,IAAS5L,MAAMC,QAAQ4L,IACjCR,GAAUO,EAAMC,GACjBD,IAASC,EAEb,OAAO,GAKb,OAAO,ECxCT,OACEC,KAQAC,YAAaD,GAAQA,IAASrK,EAC9BuK,SAAUF,IAASrK,EACnBwK,WAAYH,IAASrK,EACrByK,QAASJ,IAASrK,EAClB0K,UAAWL,IAASrK,OChBN5B,GAAsD,kBAAVA,KCA5CA,GACdA,aAAiBuM,eCCH3M,GACG,oBAAjBA,EAAQC,QCDMD,GACG,UAAjBA,EAAQC,QCHMG,GAAqD,iBAAVA,KCA1B,oBAAXwM,aACU,IAAvBA,OAAOD,aACM,oBAAbE,YCEOpF,IAAcqF,GAAcrF,KAASoF,SAASE,SAAStF,SCY1DuF,GAAb3E,cACU4E,eAAwB,GAEhC5E,IAAI7E,GACFyJ,KAAKC,UAAUC,KAAK3J,GAGtB6E,cACE,IAAK,MAAM+E,KAAYH,KAAKC,UAC1BE,IAEFH,KAAKC,UAAY,IAIrB,MAAMG,GAGJhF,YAAoBiF,EAAuBC,GAAvBN,cAAAK,EAFpBL,aAAS,EAGPM,EAAaC,IAAI,IAAOP,KAAKQ,QAAS,GAGxCpF,KAAKjI,GACE6M,KAAKQ,QACRR,KAAKK,SAASpJ,KAAK9D,UAKJsN,GAGnBrF,cACE4E,KAAKU,UAAY,GAGnBtF,KAAKjI,GACH,IAAK,MAAMkN,KAAYL,KAAKU,UAC1BL,EAASpJ,KAAK9D,GAIlBiI,UAAUiF,GACR,MAAMC,EAAe,IAAIP,GACnBY,EAAa,IAAIP,GAAWC,EAAUC,GAG5C,OAFAN,KAAKU,UAAUR,KAAKS,GAEbL,EAGTlF,cACE4E,KAAKU,UAAY,aCjDGE,GAAMnF,EAAapH,GACzC,MAAMwM,EAAajF,EAAMvH,GAAQ,CAACA,GAAQwH,EAAaxH,GACjDyM,EACiB,GAArBD,EAAW3K,OAAcuF,EAd7B,SAAiBA,EAAaoF,GAC5B,MAAM3K,EAAS2K,EAAWpD,MAAM,GAAI,GAAGvH,OACvC,IAAIwF,EAAQ,EAEZ,KAAOA,EAAQxF,GACbuF,EAAS5G,EAAY4G,GAAUC,IAAUD,EAAOoF,EAAWnF,MAG7D,OAAOD,EAM6BsF,CAAQtF,EAAQoF,GAC9CjM,EAAMiM,EAAWA,EAAW3K,OAAS,GAC3C,IAAI8K,EAEAF,UACKA,EAAYlM,GAGrB,IAAK,IAAIqM,EAAI,EAAGA,EAAIJ,EAAWpD,MAAM,GAAI,GAAGvH,OAAQ+K,IAAK,CACvD,IACIC,EADAxF,GAAS,EAEb,MAAMyF,EAAeN,EAAWpD,MAAM,IAAKwD,EAAI,IACzCG,EAAqBD,EAAajL,OAAS,EAMjD,IAJI+K,EAAI,IACND,EAAiBvF,KAGVC,EAAQyF,EAAajL,QAAQ,CACpC,MAAMmL,EAAOF,EAAazF,GAC1BwF,EAAYA,EAAYA,EAAUG,GAAQ5F,EAAO4F,GAG/CD,IAAuB1F,IACrBnH,EAAS2M,IAAc7K,EAAc6K,IACpC5N,MAAMC,QAAQ2N,KACZA,EAAUlN,OACRf,GACEsB,EAAStB,KAAUoD,EAAcpD,IAAUqO,GAAUrO,IACxDiD,UAEN8K,SAAwBA,EAAeK,UAAe5F,EAAO4F,IAG/DL,EAAiBE,GAIrB,OAAOzF,ECzDT,OAAgB1I,GACG,SAAjBA,EAAQC,KCIV,MAAMuO,GAAqC,CACzCpO,OAAO,EACP8E,SAAS,GAGLuJ,GAAc,CAAErO,OAAO,EAAM8E,SAAS,GAE5C,OAAgBqE,IACd,GAAIhJ,MAAMC,QAAQ+I,GAAU,CAC1B,GAAIA,EAAQpG,OAAS,EAAG,CACtB,MAAM6C,EAASuD,EACZtI,OAAQyN,GAAWA,GAAUA,EAAOpH,UAAYoH,EAAO3K,UACvD8F,IAAK6E,GAAWA,EAAOtO,OAC1B,MAAO,CAAEA,MAAO4F,EAAQd,UAAWc,EAAO7C,QAG5C,OAAOoG,EAAQ,GAAGjC,UAAYiC,EAAQ,GAAGxF,SAErCwF,EAAQ,GAAGoF,aAAe7M,EAAYyH,EAAQ,GAAGoF,WAAWvO,OAC1D0B,EAAYyH,EAAQ,GAAGnJ,QAA+B,KAArBmJ,EAAQ,GAAGnJ,MAC1CqO,GACA,CAAErO,MAAOmJ,EAAQ,GAAGnJ,MAAO8E,SAAS,GACtCuJ,GACFD,GAGN,OAAOA,OC9BM,CACbpO,GACEwO,cAAAA,EAAeC,YAAAA,EAAaC,WAAAA,KAE9BhN,EAAY1B,GACRA,EACAwO,EACU,KAAVxO,EACE2O,KACC3O,EACHyO,EACA,IAAI1O,KAAKC,GACT0O,EACAA,EAAW1O,GACXA,ECZN,MAAM4O,GAAkC,CACtC9J,SAAS,EACT9E,MAAO,MAGT,OAAgBmJ,GACdhJ,MAAMC,QAAQ+I,GACVA,EAAQ3H,OACN,CAACqN,EAAUP,IACTA,GAAUA,EAAOpH,UAAYoH,EAAO3K,SAChC,CACEmB,SAAS,EACT9E,MAAOsO,EAAOtO,OAEhB6O,EACND,IAEFA,YCXkBE,GAAc1I,GACpC,MAAMiB,EAAMjB,EAAGiB,IAEf,KAAIjB,EAAG8C,KAAO9C,EAAG8C,KAAK6F,MAAO1H,GAAQA,EAAI1D,UAAY0D,EAAI1D,UAIzD,OAAIqL,GAAY3H,GACPA,EAAI4H,MAGTC,GAAa7H,GACR8H,GAAc/I,EAAG8C,MAAMlJ,MAG5BoP,GAAiB/H,GACZ,IAAIA,EAAIgI,iBAAiB5F,IAAI,EAAGzJ,MAAAA,KAAYA,GAGjDsP,EAAWjI,GACNkI,GAAiBnJ,EAAG8C,MAAMlJ,MAG5BwP,GAAgB9N,EAAY2F,EAAIrH,OAASoG,EAAGiB,IAAIrH,MAAQqH,EAAIrH,MAAOoG,GC5B5E,SAASqJ,GAKP7J,EACA8J,EACA/K,EACAgL,EACAC,GAEA,IAAIrH,GAAS,EAEb,OAASA,EAAQ3C,EAAO7C,QAAQ,CAC9B,IAAK,MAAMtB,KAAOmE,EAAO2C,GACnBpI,MAAMC,QAAQwF,EAAO2C,GAAO9G,MAC7BkD,EAAY4D,KAAW5D,EAAY4D,GAAS,IAC7C5D,EAAY4D,GAAO9G,GAAO,GAC1BgO,GACE7J,EAAO2C,GAAO9G,GACdoB,EAAI6M,EAAcnH,IAAU,GAAI9G,EAAK,IACrCkD,EAAY4D,GAAO9G,GACnBkD,EAAY4D,GACZ9G,KAGDvB,EAAkBwP,IACnBlE,GAAU3I,EAAI6M,EAAcnH,IAAU,GAAI9G,GAAMmE,EAAO2C,GAAO9G,IAC1D4G,EAAI1D,EAAY4D,IAAU,GAAI9G,GAC7BkD,EAAY4D,kCACR5D,EAAY4D,KACfN,CAACxG,IAAM,IAKjBkO,IACGhL,EAAY5B,eACN4M,EAAWC,GAGtB,OAAOjL,EAGT,OAAe,CACbiB,EACA8J,EACA/K,aClDckL,EAGd7I,EAAWlF,GACX,GAAI6J,GAAY3E,IAAW2E,GAAY7J,GACrC,OAAOA,EAGT,IAAK,MAAML,KAAOK,EAAQ,CACxB,MAAMgO,EAAc9I,EAAOvF,GACrBsO,EAAcjO,EAAOL,GAE3B,IACEuF,EAAOvF,GACJL,EAAS0O,IAAgB1O,EAAS2O,IAClC5P,MAAMC,QAAQ0P,IAAgB3P,MAAMC,QAAQ2P,GACzCF,EAAUC,EAAaC,GACvBA,EACN,WAGJ,OAAO/I,ED+BP6I,CACEJ,GAAe7J,EAAQ8J,EAAe/K,EAAY2F,MAAM,EAAG1E,EAAO7C,SAClE0M,GAAeC,EAAe9J,EAAQjB,EAAY2F,MAAM,EAAG1E,EAAO7C,aErDvD,CAAIsE,EAAQ/G,KACxBgB,EAAQuB,EAAIwE,EAAK/G,EAAM,KAAKyC,QAAU0K,GAAMpG,EAAK/G,MCApCN,GACdgQ,GAAShQ,IAAUiC,EAAMgO,eAAejQ,MCN1BA,GAAoCA,aAAiBkQ,gBCI7CC,GACtB9O,EACAgG,EACAxH,EAAO,YAEP,GACEuQ,GAAU/O,IACTlB,MAAMC,QAAQiB,IAAWA,EAAO0N,MAAMqB,KACtCjC,GAAU9M,KAAYA,EAEvB,MAAO,CACLxB,KAAAA,EACA4H,QAAS2I,GAAU/O,GAAUA,EAAS,GACtCgG,IAAAA,GCbN,OAAgBgJ,GACdjP,EAASiP,KAAoBC,GAAQD,GACjCA,EACA,CACErQ,MAAOqQ,EACP5I,QAAS,OCWF8I,MACbrK,EACAsK,EACAzI,EACA0I,KAEA,MAAMpJ,IACJA,EAAG6B,KACHA,EAAIwH,SACJA,EAAQC,UACRA,EAASC,UACTA,EAASC,IACTA,EAAGC,IACHA,EAAGC,QACHA,EAAOC,SACPA,EAAQ1Q,KACRA,EAAIkO,cACJA,EAAanI,MACbA,EAAK1C,SACLA,GACEuC,EAAME,GACV,IAAKC,GAAS1C,EACZ,MAAO,GAET,MAAMsN,EAA6B/H,EAAOA,EAAK,GAAM7B,EAC/C6J,EAAoBzJ,IACpBgJ,GAA6BQ,EAASvJ,iBACxCuJ,EAASzJ,kBAAkB2G,GAAU1G,GAAW,GAAKA,GAAW,KAChEwJ,EAASvJ,mBAGPI,EAA6B,GAC7BqJ,EAAUjC,GAAa7H,GACvBiI,EAAarI,EAAgBI,GAC7B+J,EAAoBD,GAAW7B,EAC/B+B,GACF7C,GAAiBQ,GAAY3H,MAAUA,EAAIrH,OAC9B,KAAfwQ,GACCrQ,MAAMC,QAAQoQ,KAAgBA,EAAWzN,OACtCuO,EAAoBC,EAAaC,KACrC,KACAlR,EACAyH,EACAD,GAEI2J,EAAmB,CACvBC,EACAC,EACAC,EACAC,EAAUhQ,EACViQ,EAAUjQ,KAEV,MAAM4F,EAAUiK,EAAYC,EAAmBC,EAC/C9J,EAAMxH,kBACJT,KAAM6R,EAAYG,EAAUC,EAC5BrK,QAAAA,EACAJ,IAAAA,GACGiK,EAAkBI,EAAYG,EAAUC,EAASrK,KAIxD,GACEiJ,KACGU,IAAsBC,GAAWnR,EAAkBsQ,KACnDrC,GAAUqC,KAAgBA,GAC1BlB,IAAeC,GAAiBrG,GAAMpE,SACtCqM,IAAYhC,GAAcjG,GAAMpE,SACnC,CACA,MAAM9E,MAAEA,EAAKyH,QAAEA,GAAY2I,GAAUM,GACjC,CAAE1Q,QAAS0Q,EAAUjJ,QAASiJ,GAC9BqB,GAAmBrB,GAEvB,GAAI1Q,IACF8H,EAAMxH,kBACJT,KAAMgC,EACN4F,QAAAA,EACAJ,IAAK4J,GACFK,EAAkBzP,EAAiC4F,KAEnDM,GAEH,OADAmJ,EAAiBzJ,GACVK,EAKb,KAAKuJ,GAAanR,EAAkB2Q,IAAS3Q,EAAkB4Q,IAAO,CACpE,IAAIY,EACAM,EACJ,MAAMC,EAAYF,GAAmBjB,GAC/BoB,EAAYH,GAAmBlB,GAErC,GAAK/H,MAAM0H,GASJ,CACL,MAAM2B,EACH9K,EAAyBoH,aAAe,IAAI1O,KAAKyQ,GAChDR,GAASiC,EAAUjS,SACrB0R,EAAYS,EAAY,IAAIpS,KAAKkS,EAAUjS,QAEzCgQ,GAASkC,EAAUlS,SACrBgS,EAAYG,EAAY,IAAIpS,KAAKmS,EAAUlS,YAhBvB,CACtB,MAAMoS,EACH/K,EAAyBmH,eAAiB6D,WAAW7B,GACnDtQ,EAAkB+R,EAAUjS,SAC/B0R,EAAYU,EAAcH,EAAUjS,OAEjCE,EAAkBgS,EAAUlS,SAC/BgS,EAAYI,EAAcF,EAAUlS,OAaxC,IAAI0R,GAAaM,KACfP,IACIC,EACFO,EAAUxK,QACVyK,EAAUzK,QACV5F,EACAA,IAEGkG,GAEH,OADAmJ,EAAiBpJ,EAAMxH,GAAOmH,SACvBK,EAKb,IAAK6I,GAAaC,KAAeS,GAAWrB,GAASQ,GAAa,CAChE,MAAM8B,EAAkBP,GAAmBpB,GACrC4B,EAAkBR,GAAmBnB,GACrCc,GACHxR,EAAkBoS,EAAgBtS,QACnCwQ,EAAWzN,OAASuP,EAAgBtS,MAChCgS,GACH9R,EAAkBqS,EAAgBvS,QACnCwQ,EAAWzN,OAASwP,EAAgBvS,MAEtC,IAAI0R,GAAaM,KACfP,EACEC,EACAY,EAAgB7K,QAChB8K,EAAgB9K,UAEbM,GAEH,OADAmJ,EAAiBpJ,EAAMxH,GAAOmH,SACvBK,EAKb,GAAIiJ,IAAYM,GAAWrB,GAASQ,GAAa,CAC/C,MAAQxQ,MAAOwS,EAAY/K,QAAEA,GAAYsK,GAAmBhB,GAE5D,GAAIT,GAAQkC,KAAkBhC,EAAWiC,MAAMD,KAC7C1K,EAAMxH,kBACJT,KAAMgC,EACN4F,QAAAA,EACAJ,IAAAA,GACGiK,EAAkBzP,EAAgC4F,KAElDM,GAEH,OADAmJ,EAAiBzJ,GACVK,EAKb,GAAIkJ,EACF,GAAIzF,GAAWyF,GAAW,CACxB,MACM0B,EAAgBvC,SADDa,EAASR,GACiBS,GAE/C,GAAIyB,IACF5K,EAAMxH,kCACDoS,GACApB,EACDzP,EACA6Q,EAAcjL,WAGbM,GAEH,OADAmJ,EAAiBwB,EAAcjL,SACxBK,OAGN,GAAI1G,EAAS4P,GAAW,CAC7B,IAAI2B,EAAmB,GAEvB,IAAK,MAAMlR,KAAOuP,EAAU,CAC1B,IAAK9N,EAAcyP,KAAsB5K,EACvC,MAGF,MAAM2K,EAAgBvC,SACda,EAASvP,GAAK+O,GACpBS,EACAxP,GAGEiR,IACFC,iCACKD,GACApB,EAAkB7P,EAAKiR,EAAcjL,UAG1CyJ,EAAiBwB,EAAcjL,SAE3BM,IACFD,EAAMxH,GAAQqS,IAKpB,IAAKzP,EAAcyP,KACjB7K,EAAMxH,kBACJ+G,IAAK4J,GACF0B,IAEA5K,GACH,OAAOD,EAOf,OADAoJ,GAAiB,GACVpJ,GCvKT,MAAM8K,GAAiB,CACrB3G,KAAMrK,EACNiR,eAAgBjR,EAChBkR,kBAAkB,GAGdC,GAAsC,oBAAXvG,gBAEjBwG,GAIdxP,EAA8C,IAE9C,IAgCIyP,EAhCA1M,iCACCqM,IACApP,GAEDgB,EAAsC,CACxCE,SAAS,EACTG,cAAc,EACdF,YAAa,GACbuO,aAAa,EACbC,YAAa,EACbvO,cAAe,GACfwO,cAAc,EACdC,oBAAoB,EACpBvO,SAAS,EACTC,OAAQ,IAENoB,EAAU,GACVR,EAAiBY,EAASmJ,eAAiB,GAC3ChK,EAAca,EAASf,iBACvB,GACA6F,GAAY1F,GACZgB,EAAc,CAChBC,QAAQ,EACRP,OAAO,EACPiN,OAAO,GAEL7M,EAAgB,CAClBJ,MAAO,IAAIiF,IACXiI,QAAS,IAAIjI,IACb5E,MAAO,IAAI4E,IACXgI,MAAO,IAAIhI,KAGTkI,EAAQ,EACRC,EAAoD,GACxD,MAAMnR,EAAkB,CACtBoC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,GAEJK,EAAoC,CACxCkO,MAAO,IAAIhG,GACXjJ,QAAS,IAAIiJ,GACb5G,MAAO,IAAI4G,GACXjI,MAAO,IAAIiI,IAGPoG,EAA6BC,GAAmBpN,EAAS0F,MACzD2H,EAA4BD,GAAmBpN,EAASsM,gBACxDgB,EACJtN,EAASuN,eAAiBlS,EAStBmS,EAAiB,CACrBzT,EACA0T,KAECA,IACAvN,EAAOwN,UACNxN,EAAO6M,MAAMY,IAAI5T,IACjBmG,EAAO6M,MAAMY,KAAK5T,EAAKmS,MAAM,QAAU,IAAI,KAEzC0B,EAAe5D,MAAO6D,IAC1B,IAAItP,GAAU,EAed,OAbIxC,EAAgBwC,UAClBA,EAAUyB,EAAS8N,SACfnR,SAAqBoR,KAAmBvP,cAClCwP,EAAyBpO,GAAS,GAEvCiO,GAAoBtP,IAAYN,EAAWM,UAC9CN,EAAWM,QAAUA,EACrBM,EAAUC,MAAMvB,KAAK,CACnBgB,QAAAA,MAKCA,GA+CH0P,EAAe,CAAClU,EAAyBwH,KAC7CO,EAAI7D,EAAWO,OAAQzE,EAAMwH,GAC7B1C,EAAUC,MAAMvB,KAAK,CACnBiB,OAAQP,EAAWO,UAIjB0P,EAAsB,CAC1BnU,EACAoU,EACArN,KAEA,MAAMnB,EAAerD,EAAIsD,EAAS7F,GAElC,GAAI4F,EAAO,CACT,MAAM/E,EAAe0B,EAAI6C,EAAapF,EAAMuC,EAAI8C,EAAgBrF,IAEhEoB,EAAYP,IACXkG,GAAQA,EAAyBsN,gBAClCD,EACIrM,EACE3C,EACApF,EACAoU,EAAuBvT,EAAe2N,GAAc5I,EAAME,KAE5DwO,EAActU,EAAMa,GAG1BwF,EAAYN,OAAS8N,KAGjBU,EAAsB,CAC1BvU,EACAwU,EACAC,EACAC,GAAe,KAIf,IAAIC,GAAe,EACnB,MAAMvL,EAA8D,CAClEpJ,KAAAA,GAEI4U,EAAyBrS,EAAI2B,EAAWI,cAAetE,GAE7D,GAAIgC,EAAgBoC,QAAS,CAC3B,MAAMyQ,EAAsB3Q,EAAWE,QAEvCF,EAAWE,QAAUgF,EAAOhF,QAAU0Q,IACtCH,EAAeE,IAAwBzL,EAAOhF,QAGhD,GAAIpC,EAAgBqC,cAAgBoQ,EAAkB,CACpD,MAAMM,EAAuBxS,EAAI2B,EAAWG,YAAarE,GAC1BkL,GAC7B3I,EAAI8C,EAAgBrF,GACpBwU,GAIErH,GAAMjJ,EAAWG,YAAarE,GAC9B+H,EAAI7D,EAAWG,YAA6BrE,GAAM,GACtDoJ,EAAO/E,YAAcH,EAAWG,YAChCsQ,EACEA,GACAI,IAAyBxS,EAAI2B,EAAWG,YAAarE,GAczD,OAXIyU,IAAqBG,IACvB7M,EAAI7D,EAAWI,cAA+BtE,EAAMyU,GACpDrL,EAAO9E,cAAgBJ,EAAWI,cAClCqQ,EACEA,GACC3S,EAAgBsC,eACfsQ,IAA2BH,GAGjCE,GAAgBD,GAAgB5P,EAAUC,MAAMvB,KAAK4F,GAE9CuL,EAAevL,EAAS,IAG3B4L,EAAwB,CAAChV,EAAWN,KACxCqI,EACE7D,EAAWG,YACXrE,EACAiV,GACEvV,EACA6C,EAAI8C,EAAgBrF,EAAM,IAC1BuC,EAAI2B,EAAWG,YAAarE,EAAM,MAGtCkV,GAAgBhR,EAAWG,YAAarE,IAGpCmV,EAAsBlF,MAC1B6D,EACA9T,EACAwE,EACAgD,EACAH,KAMA,MAAM+N,EAAqB7S,EAAI2B,EAAWO,OAAQzE,GAC5CqV,EACJrT,EAAgBwC,SAAWN,EAAWM,UAAYA,EA1LpD,IAAqBf,EAAa6R,EAuMlC,GAXIpS,EAAMqS,YAAc/N,GACtBmL,EACEA,IA9LiBlP,EA8LcyQ,EA9LDoB,EA8LepS,EAAMqS,WA7LvD,IAAIC,KACFC,aAAavC,GACbA,EAAQhH,OAAOwJ,WAAW,IAAMjS,KAAY+R,GAAOF,KA4LnD3C,EAAmB3S,EAAMwH,KAEzBiO,aAAavC,GACb1L,EACIO,EAAI7D,EAAWO,OAAQzE,EAAMwH,GAC7B2F,GAAMjJ,EAAWO,OAAQzE,MAI3BwH,GAAS0D,GAAUkK,EAAoB5N,GAAS4N,KAC/CxS,EAAcyE,IACfgO,KACDvB,EACD,CACA,MAAM6B,+CACDtO,GACCgO,EAAoB,CAAE7Q,QAAAA,GAAY,KACtCC,OAAQP,EAAWO,OACnBzE,KAAAA,IAGFkE,iCACKA,GACAyR,GAGL7Q,EAAUC,MAAMvB,KAAKmS,GAGvBxC,EAAenT,KAEXgC,EAAgBuC,eAAiB4O,EAAenT,KAClD8E,EAAUC,MAAMvB,KAAK,CACnBe,cAAc,IAEhB4O,EAAiB,KAIfa,EAAkB/D,MAAOjQ,GAC7BiG,EAAS8N,eACC9N,EAAS8N,SACb1R,iBAAK+C,GACLa,EAAS2P,QCrXJ,EACbjN,EACA9C,EACA2N,EACArD,KAEA,MAAMzH,EAAiD,GAEvD,IAAK,MAAM1I,KAAQ2I,EAAa,CAC9B,MAAM/C,EAAerD,EAAIsD,EAAS7F,GAElC4F,GAASmC,EAAIW,EAAQ1I,EAAM4F,EAAME,IAGnC,MAAO,CACL0N,aAAAA,EACArT,MAAO,IAAIwI,GACXD,OAAAA,EACAyH,0BAAAA,IDoWM0F,CACE7V,GAAQmG,EAAOJ,MACfF,EACAI,EAASuN,aACTvN,EAASkK,4BAGZ,GAmBD8D,EAA2BhE,MAC/BvH,EACAoN,EACAF,EAAU,CACRG,OAAO,MAGT,IAAK,MAAM/V,KAAQ0I,EAAQ,CACzB,MAAM9C,EAAQ8C,EAAO1I,GAErB,GAAI4F,EAAO,CACT,MAAMoQ,EAAiBpQ,EAAME,GACvB0O,EAAa7R,EAAKiD,EAAO,MAE/B,GAAIoQ,EAAgB,CAClB,MAAMC,QAAmBC,GACvBtQ,EACArD,EAAI6C,EAAa4Q,EAAehW,MAChCuT,EACAtN,EAASkK,2BAGX,GAAI8F,EAAWD,EAAehW,QAC5B4V,EAAQG,OAAQ,EAEZD,GACF,MAICA,IACHG,EAAWD,EAAehW,MACtB+H,EACE7D,EAAWO,OACXuR,EAAehW,KACfiW,EAAWD,EAAehW,OAE5BmN,GAAMjJ,EAAWO,OAAQuR,EAAehW,OAIhDwU,SACSP,EACLO,EACAsB,EACAF,IAKR,OAAOA,EAAQG,OAeXjB,EAAwB,CAAC9U,EAAMR,KACnCQ,GAAQR,GAAQuI,EAAI3C,EAAapF,EAAMR,IACtC0L,GAAUiL,IAAa9Q,IAGpB+Q,EAAyC,CAC7CjW,EACAU,EACAwV,KAEA,MAAMvL,mBACAzE,EAAYN,MACZX,EACAhE,EAAYP,GACZwE,EACAqK,GAASvP,GACT,CAAEwH,CAACxH,GAAQU,GACXA,GAGN,GAAIV,EAAO,CACT,MAAMY,EAAS4D,EAAsBxE,GAAOgJ,IACzCmN,IACCD,GAAYlQ,EAAO6M,MAAMlG,IAAIwJ,GAC7B/T,EAAIuI,EAAawL,KAIrB,OAAOzW,MAAMC,QAAQK,GAASY,EAASA,EAAO,GAIhD,OADAsV,IAAalQ,EAAOwN,UAAW,GACxB7I,GAMHwJ,EAAgB,CACpBtU,EACAN,EACAmJ,EAA0B,GAC1B6L,KAEA,MAAM9O,EAAerD,EAAIsD,EAAS7F,GAClC,IAAIwU,EAAsB9U,EAE1B,GAAIkG,EAAO,CACT,MAAMoQ,EAAiBpQ,EAAME,GAEzBkQ,IACFjO,EAAI3C,EAAapF,EAAMkP,GAAgBxP,EAAOsW,IAE9CxB,EACE+B,IAASnK,GAAc4J,EAAejP,MAAQnH,EAAkBF,GAC5D,GACAA,EAEFoP,GAAiBkH,EAAejP,KAClC,IAAIiP,EAAejP,IAAI8B,SAAS2N,QAC7BC,GACEA,EAAUC,SACTlC,EACA5P,SAAS6R,EAAU/W,QAEhBsW,EAAepN,KACpBjC,EAAgBqP,EAAejP,KACjCiP,EAAepN,KAAKnG,OAAS,EACzBuT,EAAepN,KAAK4N,QACjBG,GACEA,EAAY/P,QAAU/G,MAAMC,QAAQ0U,KAC9BA,EAAkB3R,KAClBrD,GAAiBA,IAASmX,EAAYjX,OAEzC8U,IAAemC,EAAYjX,OAElCsW,EAAepN,KAAK,GAAGhC,UAAY4N,EAExCwB,EAAepN,KAAK4N,QACjBI,GACEA,EAAShQ,QAAUgQ,EAASlX,QAAU8U,GAI7CwB,EAAejP,IAAIrH,MAAQ8U,EAG7BE,GACE5P,EAAUf,QAAQP,KAAK,CACrB8B,OAAQF,EACRpF,KAAAA,MAKP6I,EAAQgO,aAAehO,EAAQiO,cAC9BvC,EAAoBvU,EAAMwU,EAAY3L,EAAQiO,aAEhDjO,EAAQkO,gBAAkBC,EAAQhX,IAG9BiX,EAAY,CAChBjX,EACAN,EACAmJ,KAEA,IAAK,MAAMqO,KAAYxX,EAAO,CAC5B,MAAM8U,EAA0C9U,EAAMwX,GAChDZ,EAAY,GAAGtW,KAAQkX,IACvBtR,EAAQrD,EAAIsD,EAASyQ,IAE1BnQ,EAAOC,MAAMwN,IAAI5T,IACfqL,GAAYmJ,MACZ5O,GAAUA,EAAME,KAClB/F,EAAayU,GAEVF,EAAcgC,EAAW9B,EAAY3L,GAAS,GAD9CoO,EAAUX,EAAW9B,EAAY3L,KA6CnCsO,EAA8BlH,MAAOxJ,IACzC,MAAMC,EAASD,EAAMC,OACrB,IAAI1G,EAAO0G,EAAO1G,KAClB,MAAM4F,EAAerD,EAAIsD,EAAS7F,GAElC,GAAI4F,EAAO,CACT,IAAI4B,EACAhD,EACJ,MAAMgQ,EAAa9N,EAAOnH,KAAOiP,GAAc5I,EAAME,IAAMY,EAAOhH,MAC5DgU,EAAcjN,EAAMlH,OAAS8B,EAC7B+V,KEnoBIvO,EFooBQjD,EAAME,IEnoBpBC,QACP8C,EAAQuH,UACPvH,EAAQ0H,KACR1H,EAAQ2H,KACR3H,EAAQwH,WACRxH,EAAQyH,WACRzH,EAAQ4H,SACR5H,EAAQ6H,WF6nBDzK,EAAS8N,UACTxR,EAAI2B,EAAWO,OAAQzE,IACvB4F,EAAME,GAAGuR,OGzoBL,EACb3D,EACAnM,EACAqL,EACAL,EAIA5G,KAQIA,EAAKI,WAEG6G,GAAejH,EAAKK,YACrBzE,GAAamM,IACbd,EAAcL,EAAe1G,SAAWF,EAAKE,WAC9C6H,IACCd,EAAcL,EAAezG,WAAaH,EAAKG,aACjD4H,GHmnBH4D,CACE5D,EACAnR,EAAI2B,EAAWI,cAAetE,GAC9BkE,EAAW0O,YACXU,EACAF,GAEEmE,EAAY9D,EAAezT,EAAM0T,GAEnCA,EACF9N,EAAME,GAAGgB,QAAUlB,EAAME,GAAGgB,OAAOL,GAC1Bb,EAAME,GAAGU,UAClBZ,EAAME,GAAGU,SAASC,GAGpBsB,EAAI3C,EAAapF,EAAMwU,GAEvB,MAAMnN,EAAakN,EACjBvU,EACAwU,EACAd,GACA,GAGIgB,GAAgB9R,EAAcyE,IAAekQ,EAQnD,IANC7D,GACC5O,EAAUkO,MAAMxP,KAAK,CACnBxD,KAAAA,EACAT,KAAMkH,EAAMlH,OAGZ6X,EACF,OACE1C,GACA5P,EAAUC,MAAMvB,oBAAOxD,KAAAA,GAAUuX,EAAY,GAAKlQ,IAatD,IATCqM,GAAe6D,GAAazS,EAAUC,MAAMvB,KAAK,IAElD2P,EAAenT,IAAQmT,EAAenT,GAAQ,GAE9CgC,EAAgBuC,cACdO,EAAUC,MAAMvB,KAAK,CACnBe,cAAc,IAGd0B,EAAS8N,SAAU,CACrB,MAAMtP,OAAEA,SAAiBuP,EAAgB,CAAChU,IAG1C,GAFAwH,EAAQjF,EAAIkC,EAAQzE,GAEhB2G,EAAgBD,KAAYc,EAAO,CACrC,MAAMgQ,EAAiBlX,EAAkBN,GACnCyX,EAAclV,EAAIsD,EAAS2R,GAEjC,GACE3X,MAAMC,QAAQ2X,IACdA,EAAYhJ,MACT7I,GAAiBA,EAAME,IAAMa,EAAgBf,EAAME,GAAGiB,MAEzD,CACA,MAAM2Q,EAAcnV,EAAIkC,EAAQ+S,EAAgB,IAChDE,EAAYnY,OAASiI,EAAQkQ,GAC7B1X,EAAOwX,GAIXhT,EAAU5B,EAAc6B,QAExB+C,SACQ0O,GACJtQ,EACArD,EAAI6C,EAAapF,GACjBuT,EACAtN,EAASkK,4BAEXnQ,GAEFwE,QAAgBqP,GAAa,GAG/BjO,EAAME,GAAGuR,MAAQL,EAAQpR,EAAME,GAAGuR,MAElClC,GAAoB,EAAOnV,EAAMwE,EAASgD,EAAOH,GE5tBxC,IAACwB,GFguBRmO,EAAwC/G,MAAOjQ,EAAM6I,EAAU,MACnE,IAAIrE,EACA6N,EACJ,MAAMsF,EAAahT,EAAsB3E,GAMzC,GAJA8E,EAAUC,MAAMvB,KAAK,CACnBe,cAAc,IAGZ0B,EAAS8N,SAAU,CACrB,MAAMtP,OAnWwBwL,OAAO9P,IACvC,MAAMsE,OAAEA,SAAiBuP,IAEzB,GAAI7T,EACF,IAAK,MAAMH,KAAQG,EAAO,CACxB,MAAMqH,EAAQjF,EAAIkC,EAAQzE,GAC1BwH,EACIO,EAAI7D,EAAWO,OAAQzE,EAAMwH,GAC7B2F,GAAMjJ,EAAWO,OAAQzE,QAG/BkE,EAAWO,OAASA,EAGtB,OAAOA,GAqVgBmT,CACnBxW,EAAYpB,GAAQA,EAAO2X,GAG7BnT,EAAU5B,EAAc6B,GACxB4N,EAAmBrS,GACd2X,EAAWvX,KAAMJ,GAASuC,EAAIkC,EAAQzE,IACvCwE,OACKxE,GACTqS,SACQwF,QAAQC,IACZH,EAAWxO,IAAI8G,MAAOqG,IACpB,MAAM1Q,EAAQrD,EAAIsD,EAASyQ,GAC3B,aAAarC,EACXrO,GAASA,EAAME,GAAK,CAAE6B,CAAC2O,GAAY1Q,GAAUA,OAInD6I,MAAMjO,SACRqT,KAEAxB,EAAmB7N,QAAgByP,EAAyBpO,GAkB9D,OAfAf,EAAUC,MAAMvB,oCACTkM,GAAS1P,IAASwE,IAAYN,EAAWM,QAAe,CAAExE,KAAAA,GAAP,KACxDyE,OAAQP,EAAWO,OACnBD,QAAAA,EACAD,cAAc,KAGhBsE,EAAQC,cACLuJ,GACD5J,EACE5C,EACC1E,GAAQoB,EAAI2B,EAAWO,OAAQtD,GAChCnB,EAAO2X,EAAaxR,EAAOJ,OAGxBsM,GAGH8D,EACJwB,IAIA,MAAMrS,iCACDD,GACCgB,EAAYN,MAAQX,EAAc,IAGxC,OAAOhE,EAAYuW,GACfrS,EACAoK,GAASiI,GACTpV,EAAI+C,EAAQqS,GACZA,EAAWxO,IAAKnJ,GAASuC,EAAI+C,EAAQtF,KAwDrCuG,EAA8C,CAACvG,EAAM6I,EAAU,MACnE,IAAK,MAAMyN,KAAatW,EAAO2E,EAAsB3E,GAAQmG,EAAOJ,MAClEI,EAAOJ,MAAMgS,OAAOzB,GACpBnQ,EAAOC,MAAM2R,OAAOzB,GAEhB/T,EAAIsD,EAASyQ,KACVzN,EAAQmP,YACX7K,GAAMtH,EAASyQ,GACfnJ,GAAM/H,EAAakR,KAGpBzN,EAAQoP,WAAa9K,GAAMjJ,EAAWO,OAAQ6R,IAC9CzN,EAAQqP,WAAa/K,GAAMjJ,EAAWG,YAAaiS,IACnDzN,EAAQsP,aAAehL,GAAMjJ,EAAWI,cAAegS,IACvDrQ,EAASf,mBACP2D,EAAQuP,kBACTjL,GAAM9H,EAAgBiR,IAI5BxR,EAAUkO,MAAMxP,KAAK,IAErBsB,EAAUC,MAAMvB,oCACXU,GACE2E,EAAQqP,UAAiB,CAAE9T,QAAS0Q,KAAhB,MAG1BjM,EAAQwP,aAAexE,KAGpBrO,EAA0C,CAACxF,EAAM6I,EAAU,MAC/D,MAAMjD,EAAQrD,EAAIsD,EAAS7F,GAyB3B,OAvBA+H,EAAIlC,EAAS7F,EAAM,CACjB8F,gDACMF,GAASA,EAAME,GAAKF,EAAME,GAAK,CAAEiB,IAAK,CAAE/G,KAAAA,MAC5CA,KAAAA,EACA+F,OAAO,IACJ8C,KAGP1C,EAAOJ,MAAM+G,IAAI9M,IAEhBoB,EAAYyH,EAAQnJ,QAAUqI,EAAI3C,EAAapF,EAAM6I,EAAQnJ,OAE9DkG,EACIiI,GAAUhF,EAAQxF,WAClB0E,EACE3C,EACApF,EACA6I,EAAQxF,cACJ3C,EACA6B,EAAI6C,EAAapF,EAAMwO,GAAc5I,EAAME,MAEjDqO,EAAoBnU,GAAM,GAEvByS,GACF,CAAEzS,KAAMA,gCAEPA,KAAAA,GACI6N,GAAUhF,EAAQxF,UAClB,CAAEA,SAAUwF,EAAQxF,UACpB,KACJmD,SAAU2Q,EACVrQ,OAAQqQ,EACRpQ,IAAMA,IACJ,GAAIA,EAAK,CACPvB,EAASxF,EAAM6I,GACf,IAAIjD,EAAerD,EAAIsD,EAAS7F,GAChC,MAAMsY,EAAWlX,EAAY2F,EAAIrH,QAC7BqH,EAAIwR,kBACDxR,EAAIwR,iBAAiB,yBAAyB,IAGjDxR,EAEE+J,EIn6BL,CAAC/J,GACd6H,GAAa7H,IAAQJ,EAAgBI,GJk6BCyR,CAA0BF,GAEpD,GACEA,IAAa1S,EAAME,GAAGiB,KACrB+J,GACC9P,EAAQ4E,EAAME,GAAG8C,MAAQ,IAAI/F,KAC1BmL,GAAWA,IAAWsK,GAG3B,OAGF1S,EAAQ,CACNE,GAAIgL,iCAEKlL,EAAME,KACT8C,KAAM,IACD5H,EAAQ4E,EAAME,GAAG8C,MAAQ,IAAIrI,OAC7BwG,GAAQqF,GAAcrF,IAAQoF,SAASE,SAAStF,IAEnDuR,GAEFvR,IAAK,CAAExH,KAAM+Y,EAAS/Y,KAAMS,KAAAA,oCAGzB4F,EAAME,KACTiB,IAAKuR,KAIbvQ,EAAIlC,EAAS7F,EAAM4F,KAEjBiD,IAAYA,EAAQxF,WACpB8Q,EAAoBnU,GAAM,EAAOsY,OAC9B,CACL,MAAM1S,EAAerD,EAAIsD,EAAS7F,EAAM,IAClCkF,EACJe,EAASf,kBAAoB2D,EAAQ3D,iBAEnCU,EAAME,KACRF,EAAME,GAAGC,OAAQ,GAGnBb,KAEIgB,EAAmBC,EAAOC,MAAOpG,KAASqG,EAAYC,SAExDH,EAAO8M,QAAQnG,IAAI9M,QAoJjC,MAAO,CACL+D,QAAS,CACPyB,SAAAA,EACAe,WAAAA,EACA6P,UAAAA,EACAtB,UAAAA,EACAjB,aAAAA,EACA4E,iBAnqBqB,KACvB,IAAK,MAAMzY,KAAQmG,EAAO8M,QAAS,CACjC,MAAMrN,EAAerD,EAAIsD,EAAS7F,GAElC4F,IACGA,EAAME,GAAG8C,KAAOhD,EAAME,GAAG8C,KAAK6F,MAAMiK,IAAQA,GAAK9S,EAAME,GAAGiB,OAC3DR,EAAWvG,GAGfmG,EAAO8M,QAAU,IAAIjI,KA2pBnB2N,kBA57B6C,CAC/C3Y,EACA4Y,EACApD,EACAlQ,EAAS,GACTuT,GAAkB,EAClBC,GAAkB,KAIlB,GAFAzS,EAAYC,QAAS,EAEjBwS,GAAmBvW,EAAIsD,EAAS7F,GAAO,CACzC,MAAM8K,EAAc8N,EAAOrW,EAAIsD,EAAS7F,GAAOwV,EAAKuD,KAAMvD,EAAKwD,MAC/DH,GAAmB9Q,EAAIlC,EAAS7F,EAAM8K,GAGxC,GAAIjL,MAAMC,QAAQyC,EAAI2B,EAAWO,OAAQzE,IAAQ,CAC/C,MAAMyE,EAASmU,EAAOrW,EAAI2B,EAAWO,OAAQzE,GAAOwV,EAAKuD,KAAMvD,EAAKwD,MACpEH,GAAmB9Q,EAAI7D,EAAWO,OAAQzE,EAAMyE,GAChDyQ,GAAgBhR,EAAWO,OAAQzE,GAGrC,GAAIgC,EAAgBsC,eAAiB/B,EAAI2B,EAAWI,cAAetE,GAAO,CACxE,MAAMsE,EAAgBsU,EACpBrW,EAAI2B,EAAWI,cAAetE,GAC9BwV,EAAKuD,KACLvD,EAAKwD,MAEPH,GACE9Q,EAAI7D,EAAWI,cAA+BtE,EAAMsE,GACtD4Q,GAAgBhR,EAAWI,cAAetE,IAGxCgC,EAAgBqC,aAAerC,EAAgBoC,UACjD4Q,EAAsBhV,EAAMsF,GAG9BR,EAAUC,MAAMvB,KAAK,CACnBY,QAAS0Q,EAAU9U,EAAMsF,GACzBjB,YAAaH,EAAWG,YACxBI,OAAQP,EAAWO,OACnBD,QAASN,EAAWM,WAq5BpByU,eAtnBoBjZ,GACtBuC,EAAI8D,EAAYN,MAAQX,EAAcC,EAAgBrF,EAAM,IAsnB1D8E,UAAAA,EACA9C,gBAAAA,EACA6D,cACE,OAAOA,GAETA,YAAYnG,GACVmG,EAAUnG,GAEZ0F,kBACE,OAAOA,GAETA,gBAAgB1F,GACd0F,EAAc1F,GAEhB2G,kBACE,OAAOA,GAETA,gBAAgB3G,GACd2G,EAAc3G,GAEhB2F,qBACE,OAAOA,GAETA,mBAAmB3F,GACjB2F,EAAiB3F,GAEnByG,aACE,OAAOA,GAETA,WAAWzG,GACTyG,EAASzG,GAEXwE,iBACE,OAAOA,GAETA,eAAexE,GACbwE,EAAaxE,GAEfuG,eACE,OAAOA,GAETA,aAAavG,GACXuG,iCACKA,GACAvG,KAITsX,QAAAA,EACAxR,SAAAA,EACA0T,aAzMA,CAACC,EAASC,IAAcnJ,MAAOoJ,IACzBA,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEjB,IAAIC,GAAoB,EACpB1O,mBAAwB1F,GAE5BN,EAAUC,MAAMvB,KAAK,CACnBsP,cAAc,IAGhB,IACE,GAAI7M,EAAS8N,SAAU,CACrB,MAAMtP,OAAEA,EAAMa,OAAEA,SAAiB0O,IACjC9P,EAAWO,OAASA,EACpBqG,EAAcxF,aAER2O,EAAyBpO,GAI/BjD,EAAcsB,EAAWO,SACzBpC,OAAOG,KAAK0B,EAAWO,QAAQgK,MAAOzO,GAASuC,EAAIuI,EAAa9K,KAEhE8E,EAAUC,MAAMvB,KAAK,CACnBiB,OAAQ,GACRqO,cAAc,UAEVqG,EAAQrO,EAAauO,KAE3BD,SAAoBA,EAAUlV,EAAWO,OAAQ4U,GACjDpT,EAASuM,kBACP/J,EACE5C,EACC1E,GAAQoB,EAAI2B,EAAWO,OAAQtD,GAChCgF,EAAOJ,QAGb,MAAO0T,GAEP,MADAD,GAAoB,EACdC,UAENvV,EAAW0O,aAAc,EACzB9N,EAAUC,MAAMvB,KAAK,CACnBoP,aAAa,EACbE,cAAc,EACdC,mBACEnQ,EAAcsB,EAAWO,SAAW+U,EACtC3G,YAAa3O,EAAW2O,YAAc,EACtCpO,OAAQP,EAAWO,WAwJzBuO,MApWwC,CACxChT,EAIAa,IAEAoK,GAAWjL,GACP8E,EAAUkO,MAAMzP,UAAU,CACxBC,KAAOkW,GACL1Z,EACEoW,OACE1V,EACAG,GAEF6Y,KAGNtD,EACEpW,EACAa,GACA,GAgVN8Y,SAtlB8C,CAC9C3Z,EACAN,EACAmJ,EAAU,MAEV,MAAMjD,EAAQrD,EAAIsD,EAAS7F,GACrB4Z,EAAezT,EAAOC,MAAMwN,IAAI5T,GAEtC+H,EAAI3C,EAAapF,EAAMN,GAEnBka,GACF9U,EAAUsB,MAAM5C,KAAK,CACnBxD,KAAAA,EACAsF,OAAQF,KAIPpD,EAAgBoC,SAAWpC,EAAgBqC,cAC5CwE,EAAQgO,cAER7B,EAAsBhV,EAAMN,GAE5BoF,EAAUC,MAAMvB,KAAK,CACnBxD,KAAAA,EACAqE,YAAaH,EAAWG,YACxBD,QAAS0Q,EAAU9U,EAAMN,QAI7BkG,GAAUA,EAAME,IAAOlG,EAAkBF,GAErC4U,EAActU,EAAMN,EAAOmJ,GAAS,GADpCoO,EAAUjX,EAAMN,EAAOmJ,GAI7B4K,EAAezT,IAAS8E,EAAUC,MAAMvB,KAAK,IAC7CsB,EAAUkO,MAAMxP,KAAK,CACnBxD,KAAAA,KAmjBFmW,UAAAA,EACA0D,MAtJwC,CACxCC,EACAC,EAAmB,MAEnB,MAAMC,GAAwBpX,EAAckX,GACtCG,EAAgBH,GAAczU,EAC9B6U,EAAqBnP,GAAYkP,GAMvC,GAJKF,EAAiBI,oBACpB9U,EAAiB4U,IAGdF,EAAiBK,WAAY,CAChC,GAAI7D,GACF,IAAK,MAAMvW,KAAQmG,EAAOJ,MAAO,CAC/B,MAAMH,EAAQrD,EAAIsD,EAAS7F,GAC3B,GAAI4F,GAASA,EAAME,GAAI,CACrB,MAAMkQ,EAAiBnW,MAAMC,QAAQ8F,EAAME,GAAG8C,MAC1ChD,EAAME,GAAG8C,KAAK,GACdhD,EAAME,GAAGiB,IAEb,IACEqF,GAAc4J,IACZA,EAAeqE,QAAQ,QAASR,QAClC,MACA,YAKRzU,EAAclC,EAAMgC,iBAAmB,GAAKgV,EAC5CrU,EAAU,GAEVf,EAAUf,QAAQP,KAAK,CACrB8B,OAAQ0U,EAAuBE,EAAqB7U,IAGtDP,EAAUkO,MAAMxP,KAAK,IAErBsB,EAAUsB,MAAM5C,KAAK,CACnB8B,OAAQ4U,IAIZ/T,EAAS,CACPJ,MAAO,IAAIiF,IACXiI,QAAS,IAAIjI,IACb5E,MAAO,IAAI4E,IACXgI,MAAO,IAAIhI,IACX2I,UAAU,EACV1M,MAAO,IAGTnC,EAAUC,MAAMvB,KAAK,CACnBqP,YAAakH,EAAiBO,gBAC1BpW,EAAW2O,YACX,EACJzO,QAAS2V,EAAiB7B,UACtBhU,EAAWE,UACX2V,EAAiBI,mBACjBjP,GAAU4O,EAAYzU,GAE1BuN,cAAamH,EAAiBQ,iBAC1BrW,EAAW0O,YAEfvO,YAAa0V,EAAiB7B,UAC1BhU,EAAWG,YACV,GACLC,cAAeyV,EAAiB5B,YAC5BjU,EAAWI,cACV,GACLG,OAAQsV,EAAiBS,WACrBtW,EAAWO,OACV,GACLqO,cAAc,EACdC,oBAAoB,IAGtB1M,EAAYN,OACT/D,EAAgBwC,WAAauV,EAAiB1B,YACjDhS,EAAY2M,QAAU9P,EAAMgC,kBAuE5BuV,YArYqDza,IACrDA,EACI2E,EAAsB3E,GAAMwW,QAASkE,GACnCvN,GAAMjJ,EAAWO,OAAQiW,IAE1BxW,EAAWO,OAAS,GAEzBK,EAAUC,MAAMvB,KAAK,CACnBiB,OAAQP,EAAWO,UA8XrB8B,WAAAA,EACAoU,SA3X8C,CAAC3a,EAAMwH,EAAOqB,KAC5D,MAAM9B,GAAQxE,EAAIsD,EAAS7F,EAAM,CAAE8F,GAAI,KAAgBA,IAAM,IAAIiB,IAEjEgB,EAAI7D,EAAWO,OAAQzE,iCAClBwH,IACHT,IAAAA,KAGFjC,EAAUC,MAAMvB,KAAK,CACnBxD,KAAAA,EACAyE,OAAQP,EAAWO,OACnBD,SAAS,IAGXqE,GAAWA,EAAQC,aAAe/B,GAAOA,EAAIE,OAASF,EAAIE,SA8W1D2T,SAvE+C5a,GAC/CuC,EAAIsD,EAAS7F,GAAM8F,GAAGiB,IAAIE,4BKlmC5B/D,GACGA,EAAM2X,OAAO5V,EAAmC/B,yB1DQnDA,GAEAvB,gBAACD,EAAgBoZ,UACfpb,MAAOiD,EAAKO,EAAO,aAElBA,EAAM6X,2G2DeT7X,IAEA,MAAMY,EAAUjC,KACVkC,QACJA,EAAUD,EAAQC,QAAO/D,KACzBA,EAAIkJ,QACJA,EAAU,KAAgBhE,iBAC1BA,GACEhC,GACGwF,EAAQsS,GAAarZ,EAAMsC,SAEhCgX,EAAOlX,EAAQkV,eAAejZ,GAAOkJ,IACjCD,EAAYtH,EAAMwB,OAAOuF,GACzBhE,EAAQ/C,EAAMwB,OAAOnD,GAE3B0E,EAAMrE,QAAUL,EAChBiJ,EAAU5I,QAAUqI,EACpB3E,EAAQoC,OAAOC,MAAM0G,IAAI9M,GAEzBiD,EAAa,CACXQ,SAAU,EAAG6B,OAAAA,EAAQtF,KAAMkb,MACrBA,IAAmBxW,EAAMrE,SAAY6a,GACvCF,EAAUC,EAAO1Y,EAAI+C,EAAQZ,EAAMrE,SAAU6I,KAGjD5F,QAASS,EAAQe,UAAUsB,MAC3BzC,uBAAuB,IAGzB,MAAMwX,EAAexZ,EAAMgE,YAMvByV,IAEA,MAAMC,ECrEG,EACb3S,EACAQ,IACGR,EAAOS,IAAI,CAACvD,EAAQ,KAAOjD,EAAKiD,EAAOsD,IDkENoS,CAC9BF,EACAlS,GAIF,OAFAnB,EAAIhE,EAAQqB,YAAapF,EAAMqb,GAC/BL,EAAUI,GACHC,GAET,CAACtX,EAAS/D,EAAMkJ,IAyNlB,OAvCAvH,EAAMiC,UAAU,KAGd,GAFAG,EAAQsC,YAAYC,QAAS,EAEzBvC,EAAQoC,OAAOwN,SACjB5P,EAAQe,UAAUC,MAAMvB,KAAK,SAE7B,IAAK,MAAM+X,KAAcxX,EAAQoC,OAAO6M,MACtC,GAAIhT,EAAKwb,WAAWD,GAAa,CAC/BxX,EAAQe,UAAUC,MAAMvB,KAAK,IAC7B,MAKNO,EAAQe,UAAUkO,MAAMxP,KAAK,CAC3BxD,KAAAA,EACAsF,OAAQvB,EAAQqB,cAGlBrB,EAAQoC,OAAOc,OACbwB,EAAa1E,EAAQ8B,QAAU1E,GAC7BA,EAAIqa,WAAWzX,EAAQoC,OAAOc,QAGlClD,EAAQoC,OAAOc,MAAQ,GAEvBlD,EAAQ/B,gBAAgBwC,SAAWT,EAAQ8P,gBAC1C,CAACnL,EAAQ1I,EAAM+D,EAASmF,IAE3BvH,EAAMiC,UAAU,MACbrB,EAAIwB,EAAQqB,YAAapF,IAAS+H,EAAIhE,EAAQqB,YAAapF,EAAM,IAE3D,MACD+D,EAAQkC,SAASf,kBAAoBA,IACvCnB,EAAQwC,WAAWvG,KAGtB,CAACA,EAAM+D,EAASmF,EAAShE,IAErB,CACLuW,KAAM9Z,EAAMgE,YA5HD,CAACiF,EAAgBC,KAC5B,MAAMuQ,EAAiCM,EACrC3X,EAAQkV,eAAejZ,GACvBiJ,EACAC,GAEFyS,EAAYP,EAAgCxQ,EAAQC,GACpD9G,EAAQ4U,kBACN3Y,EACA2b,EACA,CACE5C,KAAMnO,EACNoO,KAAMnO,GAERsQ,EAAaC,IACb,IA6G4B,CAACD,EAAcnb,EAAM+D,EAASmF,IAC5D0S,KAAMja,EAAMgE,YA1GD,CAACsE,EAAcC,KAC1B,MAAMkR,EAAiCM,EACrC3X,EAAQkV,eAAejZ,GACvBiJ,EACAC,GAEF2S,EAAYT,EAAgCnR,EAAMC,GAClDnG,EAAQ4U,kBACN3Y,EACA6b,EACA,CACE9C,KAAM9O,EACN+O,KAAM9O,GAERiR,EAAaC,IACb,IA2F4B,CAACD,EAAcnb,EAAM+D,EAASmF,IAC5DkB,QAASzI,EAAMgE,YA9LD,CACdjG,EAGAmJ,KAEA,MAAMuS,EAAiCU,EACrCJ,EAAc3X,EAAQkV,eAAejZ,GAAOiJ,EAAWC,GACvD+R,EAAOtW,EAAsBjF,GAAQwJ,IAEvCnF,EAAQ4U,kBACN3Y,EACA8b,EACA,CACE/C,KAAMgD,EAAerc,IAEvByb,EAAaC,IAGfrX,EAAQoC,OAAOc,MAAQ+U,EAAkBhc,EAAM,EAAG6I,IA2Kd,CAACsS,EAAcnb,EAAM+D,EAASmF,IAClEY,OAAQnI,EAAMgE,YA1ND,CACbjG,EAGAmJ,KAEA,MAAMoT,EAActX,EAAsBjF,GACpC0b,EAAiCc,EACrCR,EAAc3X,EAAQkV,eAAejZ,GAAOiJ,EAAWC,GACvD+R,EAAOgB,EAAa/S,IAEtBnF,EAAQ4U,kBACN3Y,EACAkc,EACA,CACEnD,KAAMgD,EAAerc,IAEvByb,EAAaC,IAGfrX,EAAQoC,OAAOc,MAAQ+U,EACrBhc,EACAob,EAA+B3Y,OAASwZ,EAAYxZ,OACpDoG,IAmMgC,CAACsS,EAAcnb,EAAM+D,EAASmF,IAChEiT,OAAQxa,EAAMgE,YA1KAsC,IACd,MAAMmT,EAEAgB,EACJV,EAAc3X,EAAQkV,eAAejZ,GAAOiJ,EAAWC,GACvDjB,GAEFlE,EAAQ4U,kBACN3Y,EACAoc,EACA,CACErD,KAAM9Q,GAERkT,EAAaC,KA6JmB,CAACD,EAAcnb,EAAM+D,EAASmF,IAChEa,OAAQpI,EAAMgE,YA1JD,CACbsC,EACAvI,EAGAmJ,KAEA,MAAMuS,EAAiCiB,EACrCX,EAAc3X,EAAQkV,eAAejZ,GAAOiJ,EAAWC,GACvDjB,EACAgT,EAAOtW,EAAsBjF,GAAQwJ,IAEvCnF,EAAQ4U,kBACN3Y,EACAqc,EACA,CACEtD,KAAM9Q,EACN+Q,KAAM+C,EAAerc,IAEvByb,EAAaC,IAGfrX,EAAQoC,OAAOc,MAAQ+U,EAAkBhc,EAAMiI,EAAOY,IAoIpB,CAACsS,EAAcnb,EAAM+D,EAASmF,IAChEoT,OAAQ3a,EAAMgE,YA5FD,CACbsC,EACAvI,KAEA,MAAM0b,EAAiCM,EACrC3X,EAAQkV,eAAejZ,GACvBiJ,EACAC,GAEImS,EAA0BkB,EAC9BnB,EACAnT,EACAvI,GAEFuJ,EAAU5I,QAAU4a,EAAOI,EAAyBnS,GACpDnF,EAAQ4U,kBACN3Y,EACAuc,EACA,CACExD,KAAM9Q,EACN+Q,KAAMtZ,GAERyb,EAAalS,EAAU5I,UACvB,GACA,IAoEgC,CAAC8a,EAAcnb,EAAM+D,EAASmF,IAChEpB,QAASnG,EAAMgE,YAhEfjG,IAIA,MAAM0b,EAEAH,EAAOtW,EAAsBjF,GAAQwJ,GAC3CnF,EAAQ4U,kBACN3Y,EACA,IAAMob,EACN,GACAD,EAAaC,IACb,GACA,IAmDkC,CAACD,EAAcnb,EAAM+D,EAASmF,IAClER,OAAQA,6BEhSVxF,EAA8C,IAE9C,MAAMsZ,EAAe7a,EAAMwB,UAGpBpB,EAAWiC,GAAmBrC,EAAMsC,SAAkC,CAC3EG,SAAS,EACTG,cAAc,EACdF,YAAa,GACbuO,aAAa,EACbC,YAAa,EACbvO,cAAe,GACfwO,cAAc,EACdC,oBAAoB,EACpBvO,SAAS,EACTC,OAAQ,KAGN+X,EAAanc,QACfmc,EAAanc,QAAQ0D,QAAQkC,SAAW/C,EAExCsZ,EAAanc,uCACRqS,GAAkBxP,KACrBnB,UAAAA,IAIJ,MAAMgC,EAAUyY,EAAanc,QAAQ0D,QAiCrC,OA/BAd,EAAa,CACXK,QAASS,EAAQe,UAAUC,MAC3BtB,SAAW1B,IACL8C,EAAsB9C,EAAWgC,EAAQ/B,iBAAiB,KAC5D+B,EAAQG,0CACHH,EAAQG,YACRnC,GAGLiC,mBAAqBD,EAAQG,iBAKnCvC,EAAMiC,UAAU,KACTG,EAAQsC,YAAYN,QACvBhC,EAAQ/B,gBAAgBwC,SAAWT,EAAQ8P,eAC3C9P,EAAQsC,YAAYN,OAAQ,GAE1BhC,EAAQsC,YAAY2M,QACtBjP,EAAQsC,YAAY2M,OAAQ,EAC5BjP,EAAQe,UAAUC,MAAMvB,KAAK,KAE/BO,EAAQ0U,qBAGV+D,EAAanc,QAAQ0B,UAAYiD,EAC/BjD,EACAgC,EAAQ/B,iBAGHwa,EAAanc,mFCnCiB6C,GACrC,MAAMY,EAAUjC,KACVkC,QACJA,EAAUD,EAAQC,QAAO/D,KACzBA,EAAIa,aACJA,EAAYwC,SACZA,GACEH,GAAS,GACPwB,EAAQ/C,EAAMwB,OAAOnD,GAE3B0E,EAAMrE,QAAUL,EAEhBiD,EAAa,CACXI,SAAAA,EACAC,QAASS,EAAQe,UAAUkO,MAC3BvP,SAAU,EAAGzD,KAAAA,MACX,IACG0E,EAAMrE,UACNL,GACD2E,EAAsBD,EAAMrE,SAASD,KAClCqc,GACCzc,GACAyc,IACCzc,EAAKwb,WAAWiB,IACfA,EAAYjB,WAAWxb,KAE7B,CACA+D,EAAQsC,YAAYN,OAAQ,EAC5B,MAAM+E,EAAc/G,EAAQqS,UAC1B1R,EAAMrE,QACNQ,GAGF6b,EACE5b,EAASgK,oBACAA,GACLjL,MAAMC,QAAQgL,GACd,IAAIA,GACJA,OAMZ,MAAOpL,EAAOgd,GAAe/a,EAAMsC,SACjC7C,EAAYP,GACRkD,EAAQqS,UAAUpW,GAClBa,GAON,OAJAc,EAAMiC,UAAU,KACdG,EAAQ0U,qBAGH/Y"}