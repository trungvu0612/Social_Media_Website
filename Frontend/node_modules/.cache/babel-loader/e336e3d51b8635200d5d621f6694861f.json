{"ast":null,"code":"var _jsxFileName = \"F:\\\\Greenwich\\\\Greenwich\\\\Topup\\\\Final\\\\Social media final project\\\\Frontend\\\\src\\\\contexts\\\\postContext.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useReducer } from \"react\";\nimport { apiPost, apiUrl, DELETE_POST, POSTS_LOADED_FAIL, POSTS_LOADED_SUCCESS, POST_CLICK, UPDATE_MUSIC } from \"../contexts/constants\";\nimport { postReducer } from \"../reducers/postReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostContext = /*#__PURE__*/createContext();\n\nconst PostContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // State\n  const [postState, dispatch] = useReducer(postReducer, {\n    post: {},\n    posts: [],\n    postsLoading: true\n  }); // Get all posts\n\n  const getPosts = async () => {\n    try {\n      const response = await axios.get(`${apiPost}/datapost`);\n\n      if (response.data.success) {\n        dispatch({\n          type: POSTS_LOADED_SUCCESS,\n          payload: response.data.posts\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: POSTS_LOADED_FAIL\n      });\n    }\n  }; // get id posts\n\n\n  const findIDPost = postId => {\n    const post = postState.posts.find(post => post._id === postId);\n    dispatch({\n      type: POST_CLICK,\n      payload: post\n    });\n  }; // Delete post\n\n\n  const deletePost = async postId => {\n    try {\n      const response = await axios.delete(`${apiUrl}/posts/delete/${postId}`);\n      if (response.data.success) dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; // post context data\n\n\n  const postContextData = {\n    postState,\n    getPosts,\n    deletePost,\n    findIDPost\n  };\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: postContextData,\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostContextProvider, \"IDDqKl7jza9PTt+H1MZQ9tK6CrM=\");\n\n_c = PostContextProvider;\nexport default PostContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContextProvider\");","map":{"version":3,"sources":["F:/Greenwich/Greenwich/Topup/Final/Social media final project/Frontend/src/contexts/postContext.js"],"names":["axios","createContext","useReducer","apiPost","apiUrl","DELETE_POST","POSTS_LOADED_FAIL","POSTS_LOADED_SUCCESS","POST_CLICK","UPDATE_MUSIC","postReducer","PostContext","PostContextProvider","children","postState","dispatch","post","posts","postsLoading","getPosts","response","get","data","success","type","payload","error","findIDPost","postId","find","_id","deletePost","delete","console","log","postContextData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SACEC,OADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,iBAJF,EAKEC,oBALF,EAMEC,UANF,EAOEC,YAPF,QAQO,uBARP;AASA,SAASC,WAAT,QAA4B,yBAA5B;;AAEA,OAAO,MAAMC,WAAW,gBAAGV,aAAa,EAAjC;;AAEP,MAAMW,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBb,UAAU,CAACQ,WAAD,EAAc;AACpDM,IAAAA,IAAI,EAAE,EAD8C;AAEpDC,IAAAA,KAAK,EAAE,EAF6C;AAGpDC,IAAAA,YAAY,EAAE;AAHsC,GAAd,CAAxC,CAF4C,CAQ5C;;AACA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAElB,OAAQ,WAArB,CAAvB;;AACA,UAAIiB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBR,QAAAA,QAAQ,CAAC;AACPS,UAAAA,IAAI,EAAEjB,oBADC;AAEPkB,UAAAA,OAAO,EAAEL,QAAQ,CAACE,IAAT,CAAcL;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOS,KAAP,EAAc;AACdX,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAElB;AAAR,OAAD,CAAR;AACD;AACF,GAZD,CAT4C,CAuB5C;;;AACA,QAAMqB,UAAU,GAAIC,MAAD,IAAY;AAC7B,UAAMZ,IAAI,GAAGF,SAAS,CAACG,KAAV,CAAgBY,IAAhB,CAAsBb,IAAD,IAAUA,IAAI,CAACc,GAAL,KAAaF,MAA5C,CAAb;AACAb,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAEhB,UAAR;AAAoBiB,MAAAA,OAAO,EAAET;AAA7B,KAAD,CAAR;AACD,GAHD,CAxB4C,CA6B5C;;;AACA,QAAMe,UAAU,GAAG,MAAOH,MAAP,IAAkB;AACnC,QAAI;AACF,YAAMR,QAAQ,GAAG,MAAMpB,KAAK,CAACgC,MAAN,CAAc,GAAE5B,MAAO,iBAAgBwB,MAAO,EAA9C,CAAvB;AACA,UAAIR,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EACER,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEnB,WAAR;AAAqBoB,QAAAA,OAAO,EAAEG;AAA9B,OAAD,CAAR;AACH,KAJD,CAIE,OAAOF,KAAP,EAAc;AACdO,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD;AACF,GARD,CA9B4C,CAwC5C;;;AACA,QAAMS,eAAe,GAAG;AACtBrB,IAAAA,SADsB;AAEtBK,IAAAA,QAFsB;AAGtBY,IAAAA,UAHsB;AAItBJ,IAAAA;AAJsB,GAAxB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEQ,eAA7B;AAAA,eACG,GADH,EAEGtB,QAFH,EAEa,GAFb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CArDD;;GAAMD,mB;;KAAAA,mB;AAuDN,eAAeA,mBAAf","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useReducer } from \"react\";\r\nimport {\r\n  apiPost,\r\n  apiUrl,\r\n  DELETE_POST,\r\n  POSTS_LOADED_FAIL,\r\n  POSTS_LOADED_SUCCESS,\r\n  POST_CLICK,\r\n  UPDATE_MUSIC,\r\n} from \"../contexts/constants\";\r\nimport { postReducer } from \"../reducers/postReducer\";\r\n\r\nexport const PostContext = createContext();\r\n\r\nconst PostContextProvider = ({ children }) => {\r\n  // State\r\n  const [postState, dispatch] = useReducer(postReducer, {\r\n    post: {},\r\n    posts: [],\r\n    postsLoading: true,\r\n  });\r\n\r\n  // Get all posts\r\n  const getPosts = async () => {\r\n    try {\r\n      const response = await axios.get(`${apiPost}/datapost`);\r\n      if (response.data.success) {\r\n        dispatch({\r\n          type: POSTS_LOADED_SUCCESS,\r\n          payload: response.data.posts,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: POSTS_LOADED_FAIL });\r\n    }\r\n  };\r\n\r\n  // get id posts\r\n  const findIDPost = (postId) => {\r\n    const post = postState.posts.find((post) => post._id === postId);\r\n    dispatch({ type: POST_CLICK, payload: post });\r\n  };\r\n\r\n  // Delete post\r\n  const deletePost = async (postId) => {\r\n    try {\r\n      const response = await axios.delete(`${apiUrl}/posts/delete/${postId}`);\r\n      if (response.data.success)\r\n        dispatch({ type: DELETE_POST, payload: postId });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // post context data\r\n  const postContextData = {\r\n    postState,\r\n    getPosts,\r\n    deletePost,\r\n    findIDPost,\r\n  };\r\n  return (\r\n    <PostContext.Provider value={postContextData}>\r\n      {\" \"}\r\n      {children}{\" \"}\r\n    </PostContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PostContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}