{"ast":null,"code":"var _jsxFileName = \"F:\\\\Greenwich\\\\Greenwich\\\\Topup\\\\Final\\\\Social media final project\\\\Frontend\\\\src\\\\reducers\\\\postReducer.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useReducer } from \"react\";\nimport { POSTS_LOADED_FAIL, POSTS_LOADED_SUCCESS } from \"../contexts/constants\";\nimport { postReducer } from \"../contexts/postContext\";\nimport { apiUrl } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostContext = /*#__PURE__*/createContext();\n\nconst PostContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // State\n  const [postState, dispatch] = useReducer(postReducer, {\n    post: null,\n    posts: [],\n    postsLoading: true\n  }); // Get all posts\n\n  const getPosts = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/posts`);\n\n      if (response.data.success) {\n        dispatch({\n          type: POSTS_LOADED_SUCCESS,\n          payload: response.data.musics\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: POSTS_LOADED_FAIL\n      });\n    }\n  }; // post context data\n\n\n  const postContextData = {\n    postState,\n    getPosts\n  };\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: postContextData,\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostContextProvider, \"JX3ZMEcveiCpnlpuJeHnCan1DL4=\");\n\n_c = PostContextProvider;\nexport default PostContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContextProvider\");","map":{"version":3,"sources":["F:/Greenwich/Greenwich/Topup/Final/Social media final project/Frontend/src/reducers/postReducer.js"],"names":["axios","createContext","useReducer","POSTS_LOADED_FAIL","POSTS_LOADED_SUCCESS","postReducer","apiUrl","PostContext","PostContextProvider","children","postState","dispatch","post","posts","postsLoading","getPosts","response","get","data","success","type","payload","musics","error","postContextData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,uBAAxD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,EAAjC;;AAEP,MAAMO,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBT,UAAU,CAACG,WAAD,EAAc;AACpDO,IAAAA,IAAI,EAAE,IAD8C;AAEpDC,IAAAA,KAAK,EAAE,EAF6C;AAGpDC,IAAAA,YAAY,EAAE;AAHsC,GAAd,CAAxC,CAF4C,CAQ5C;;AACA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAW,GAAEX,MAAO,QAApB,CAAvB;;AACA,UAAIU,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBR,QAAAA,QAAQ,CAAC;AACPS,UAAAA,IAAI,EAAEhB,oBADC;AAEPiB,UAAAA,OAAO,EAAEL,QAAQ,CAACE,IAAT,CAAcI;AAFhB,SAAD,CAAR;AAID;AACF,KARD,CAQE,OAAOC,KAAP,EAAc;AACdZ,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEjB;AAAR,OAAD,CAAR;AACD;AACF,GAZD,CAT4C,CAuB5C;;;AACA,QAAMqB,eAAe,GAAG;AACtBd,IAAAA,SADsB;AAEtBK,IAAAA;AAFsB,GAAxB;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAES,eAA7B;AAAA,eACG,GADH,EAEGf,QAFH,EAEa,GAFb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAlCD;;GAAMD,mB;;KAAAA,mB;AAoCN,eAAeA,mBAAf","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useReducer } from \"react\";\r\nimport { POSTS_LOADED_FAIL, POSTS_LOADED_SUCCESS } from \"../contexts/constants\";\r\nimport { postReducer } from \"../contexts/postContext\";\r\nimport { apiUrl } from \"./constants\";\r\n\r\nexport const PostContext = createContext();\r\n\r\nconst PostContextProvider = ({ children }) => {\r\n  // State\r\n  const [postState, dispatch] = useReducer(postReducer, {\r\n    post: null,\r\n    posts: [],\r\n    postsLoading: true,\r\n  });\r\n\r\n  // Get all posts\r\n  const getPosts = async () => {\r\n    try {\r\n      const response = await axios.get(`${apiUrl}/posts`);\r\n      if (response.data.success) {\r\n        dispatch({\r\n          type: POSTS_LOADED_SUCCESS,\r\n          payload: response.data.musics,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: POSTS_LOADED_FAIL });\r\n    }\r\n  };\r\n\r\n  // post context data\r\n  const postContextData = {\r\n    postState,\r\n    getPosts,\r\n  };\r\n  return (\r\n    <PostContext.Provider value={postContextData}>\r\n      {\" \"}\r\n      {children}{\" \"}\r\n    </PostContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PostContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}