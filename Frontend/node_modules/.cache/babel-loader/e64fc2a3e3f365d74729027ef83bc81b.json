{"ast":null,"code":"var _jsxFileName = \"F:\\\\Greenwich\\\\Greenwich\\\\Topup\\\\Final\\\\Social media final project\\\\Frontend\\\\src\\\\contexts\\\\authContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useEffect, useContext } from \"react\";\nimport { authReducer } from \"../reducers/authReducer\";\nimport { apiUrl, LOCAL_STORAGE_TOKEN_NAME } from \"./constants\";\nimport axios from \"axios\";\nimport setAuthToken from \"./setAuthToken\";\nimport { useHistory } from \"react-router\"; // create context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); // use useReducer manage the state of the web\n\nconst AuthContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // This object = first state on authReducer\n  const [authState, dispatch] = useReducer(authReducer, {\n    // when the user is not logged in to the web\n    authLoading: true,\n    //  the user is not authenticated\n    isAuthenticated: false,\n    // without any user information\n    user: null\n  }); // Authenticate user\n\n  const loadUser = async () => {\n    if (localStorage[LOCAL_STORAGE_TOKEN_NAME]) {\n      setAuthToken(localStorage[LOCAL_STORAGE_TOKEN_NAME]);\n    }\n\n    try {\n      const response = await axios.get(`${apiUrl}/auth`);\n\n      if (response.data.success) {\n        dispatch({\n          type: \"SET_AUTH\",\n          payload: {\n            isAuthenticated: true,\n            user: response.data.user\n          }\n        });\n      }\n    } catch (error) {\n      localStorage.removeItem(LOCAL_STORAGE_TOKEN_NAME);\n      setAuthToken(null);\n      dispatch({\n        type: \"SET_AUTH\",\n        payload: {\n          isAuthenticated: false,\n          user: null\n        }\n      });\n    }\n  };\n\n  useEffect(() => loadUser(), []); // Login\n\n  const loginUser = async userForm => {\n    try {\n      // Send req for sever\n      const response = await axios.post(`${apiUrl}/auth/login`, userForm); // if successful, return accessToken\n\n      if (response.data.success) localStorage.setItem(LOCAL_STORAGE_TOKEN_NAME, response.data.accessToken);\n      await loadUser(); // return response user data\n\n      return response.data;\n    } catch (error) {\n      if (error.response.data) return error.response.data;else return {\n        success: false,\n        message: error.message\n      };\n    }\n  }; // Register\n\n\n  const registerUser = async userForm => {\n    const config = {\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    };\n\n    try {\n      const response = await axios.post(`${apiUrl}/auth/register`, userForm, config);\n      if (response.data.success) localStorage.setItem(LOCAL_STORAGE_TOKEN_NAME, response.data.accessToken);\n      await loadUser();\n      return response.data;\n    } catch (error) {\n      if (error.response.data) return error.response.data;else return {\n        success: false,\n        message: error.message\n      };\n    }\n  }; // Logout\n\n\n  const logoutUser = () => {\n    localStorage.removeItem(LOCAL_STORAGE_TOKEN_NAME);\n    dispatch({\n      type: \"SET_AUTH\",\n      payload: {\n        isAuthenticated: false,\n        user: null\n      }\n    });\n  }; // Context data\n\n\n  const authContextData = {\n    loginUser,\n    registerUser,\n    logoutUser,\n    authState\n  }; // Return provider\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextData,\n    children: [\" \", \" \", \" \", children, \" \", \" \", \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 14\n  }, this);\n};\n\n_s(AuthContextProvider, \"ojW5GTIJft8MXt9G9WwfEC7m3vQ=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["F:/Greenwich/Greenwich/Topup/Final/Social media final project/Frontend/src/contexts/authContext.js"],"names":["createContext","useReducer","useEffect","useContext","authReducer","apiUrl","LOCAL_STORAGE_TOKEN_NAME","axios","setAuthToken","useHistory","AuthContext","AuthContextProvider","children","authState","dispatch","authLoading","isAuthenticated","user","loadUser","localStorage","response","get","data","success","type","payload","error","removeItem","loginUser","userForm","post","setItem","accessToken","message","registerUser","config","headers","logoutUser","authContextData"],"mappings":"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","sourcesContent":["import { createContext, useReducer, useEffect, useContext } from \"react\";\r\nimport { authReducer } from \"../reducers/authReducer\";\r\nimport { apiUrl, LOCAL_STORAGE_TOKEN_NAME } from \"./constants\";\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"./setAuthToken\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n// create context\r\nexport const AuthContext = createContext();\r\n\r\n// use useReducer manage the state of the web\r\nconst AuthContextProvider = ({ children }) => {\r\n    // This object = first state on authReducer\r\n    const [authState, dispatch] = useReducer(authReducer, {\r\n        // when the user is not logged in to the web\r\n        authLoading: true,\r\n        //  the user is not authenticated\r\n        isAuthenticated: false,\r\n        // without any user information\r\n        user: null,\r\n    });\r\n\r\n    // Authenticate user\r\n    const loadUser = async() => {\r\n        if (localStorage[LOCAL_STORAGE_TOKEN_NAME]) {\r\n            setAuthToken(localStorage[LOCAL_STORAGE_TOKEN_NAME]);\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(`${apiUrl}/auth`);\r\n            if (response.data.success) {\r\n                dispatch({\r\n                    type: \"SET_AUTH\",\r\n                    payload: { isAuthenticated: true, user: response.data.user },\r\n                });\r\n            }\r\n        } catch (error) {\r\n            localStorage.removeItem(LOCAL_STORAGE_TOKEN_NAME);\r\n            setAuthToken(null);\r\n            dispatch({\r\n                type: \"SET_AUTH\",\r\n                payload: { isAuthenticated: false, user: null },\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => loadUser(), []);\r\n\r\n    // Login\r\n    const loginUser = async(userForm) => {\r\n        try {\r\n            // Send req for sever\r\n            const response = await axios.post(`${apiUrl}/auth/login`, userForm);\r\n            // if successful, return accessToken\r\n            if (response.data.success)\r\n                localStorage.setItem(\r\n                    LOCAL_STORAGE_TOKEN_NAME,\r\n                    response.data.accessToken\r\n                );\r\n\r\n            await loadUser();\r\n            // return response user data\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.response.data) return error.response.data;\r\n            else return { success: false, message: error.message };\r\n        }\r\n    };\r\n\r\n    // Register\r\n    const registerUser = async(userForm) => {\r\n        const config = {\r\n            headers: {\r\n                \"content-type\": \"multipart/form-data\",\r\n            },\r\n        };\r\n        try {\r\n            const response = await axios.post(\r\n                `${apiUrl}/auth/register`,\r\n                userForm,\r\n                config\r\n            );\r\n            if (response.data.success)\r\n                localStorage.setItem(\r\n                    LOCAL_STORAGE_TOKEN_NAME,\r\n                    response.data.accessToken\r\n                );\r\n\r\n            await loadUser();\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.response.data) return error.response.data;\r\n            else return { success: false, message: error.message };\r\n        }\r\n    };\r\n\r\n    // Logout\r\n    const logoutUser = () => {\r\n        localStorage.removeItem(LOCAL_STORAGE_TOKEN_NAME);\r\n        dispatch({\r\n            type: \"SET_AUTH\",\r\n            payload: { isAuthenticated: false, user: null },\r\n        });\r\n    };\r\n\r\n    // Context data\r\n    const authContextData = {\r\n        loginUser,\r\n        registerUser,\r\n        logoutUser,\r\n        authState,\r\n    };\r\n\r\n    // Return provider\r\n    return ( <\r\n        AuthContext.Provider value = { authContextData } > { \" \" } { children } { \" \" } <\r\n        /AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}