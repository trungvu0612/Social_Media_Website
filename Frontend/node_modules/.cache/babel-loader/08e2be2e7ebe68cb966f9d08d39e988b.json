{"ast":null,"code":"var _jsxFileName = \"F:\\\\Greenwich\\\\Greenwich\\\\Topup\\\\Final\\\\Social media final project\\\\Frontend\\\\src\\\\contexts\\\\musicContext.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useReducer } from \"react\";\nimport { musicReducer } from \"../reducers/musicReducer\";\nimport { apiUrl, MUSICS_LOADED_FAIL, MUSICS_LOADED_SUCCESS } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MusicContext = /*#__PURE__*/createContext();\n\nconst MusicContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // State\n  const [musicState, dispatch] = useReducer(musicReducer, {\n    music: null,\n    musics: [],\n    musicsId: \"\",\n    musicsLoading: true\n  }); // Get all posts\n\n  const getMusics = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/music`);\n\n      if (response.data.success) {\n        dispatch({\n          type: MUSICS_LOADED_SUCCESS,\n          payload: response.data.musics\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: MUSICS_LOADED_FAIL\n      });\n    }\n  }; // music context data\n\n\n  const musicContextData = {\n    musicState,\n    getMusics\n  };\n  return /*#__PURE__*/_jsxDEV(MusicContext.Provider, {\n    value: musicContextData,\n    children: [\" \", \" \", \" \", children, \" \", \" \", \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 14\n  }, this);\n};\n\n_s(MusicContextProvider, \"sC3f3N8tOH3Lxxw8/qmu01mgE0Q=\");\n\n_c = MusicContextProvider;\nexport default MusicContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicContextProvider\");","map":{"version":3,"sources":["F:/Greenwich/Greenwich/Topup/Final/Social media final project/Frontend/src/contexts/musicContext.js"],"names":["axios","createContext","useReducer","musicReducer","apiUrl","MUSICS_LOADED_FAIL","MUSICS_LOADED_SUCCESS","MusicContext","MusicContextProvider","children","musicState","dispatch","music","musics","musicsId","musicsLoading","getMusics","response","get","data","success","type","payload","error","musicContextData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,MAAT,EAAiBC,kBAAjB,EAAqCC,qBAArC,QAAkE,aAAlE;;AAEA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,EAAlC;;AAEP,MAAMO,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC3C;AACA,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBT,UAAU,CAACC,YAAD,EAAe;AACpDS,IAAAA,KAAK,EAAE,IAD6C;AAEpDC,IAAAA,MAAM,EAAE,EAF4C;AAGpDC,IAAAA,QAAQ,EAAE,EAH0C;AAIpDC,IAAAA,aAAa,EAAE;AAJqC,GAAf,CAAzC,CAF2C,CAS3C;;AACA,QAAMC,SAAS,GAAG,YAAW;AACzB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAW,GAAEd,MAAO,QAApB,CAAvB;;AACA,UAAIa,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBT,QAAAA,QAAQ,CAAC;AACLU,UAAAA,IAAI,EAAEf,qBADD;AAELgB,UAAAA,OAAO,EAAEL,QAAQ,CAACE,IAAT,CAAcN;AAFlB,SAAD,CAAR;AAIH;AACJ,KARD,CAQE,OAAOU,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEhB;AAAR,OAAD,CAAR;AACH;AACJ,GAZD,CAV2C,CAwB3C;;;AACA,QAAMmB,gBAAgB,GAAG;AACrBd,IAAAA,UADqB;AAErBM,IAAAA;AAFqB,GAAzB;AAIA,sBAAS,QACL,YADK,CACQ,QADR;AACiB,IAAA,KAAK,EAAKQ,gBAD3B;AAAA,oBACkD,GADlD,OAC0Df,QAD1D,OACuE,GADvE;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAIH,CAjCD;;GAAMD,oB;;KAAAA,oB;AAmCN,eAAeA,oBAAf","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useReducer } from \"react\";\r\nimport { musicReducer } from \"../reducers/musicReducer\";\r\nimport { apiUrl, MUSICS_LOADED_FAIL, MUSICS_LOADED_SUCCESS } from \"./constants\";\r\n\r\nexport const MusicContext = createContext();\r\n\r\nconst MusicContextProvider = ({ children }) => {\r\n    // State\r\n    const [musicState, dispatch] = useReducer(musicReducer, {\r\n        music: null,\r\n        musics: [],\r\n        musicsId: \"\",\r\n        musicsLoading: true,\r\n    });\r\n\r\n    // Get all posts\r\n    const getMusics = async() => {\r\n        try {\r\n            const response = await axios.get(`${apiUrl}/music`);\r\n            if (response.data.success) {\r\n                dispatch({\r\n                    type: MUSICS_LOADED_SUCCESS,\r\n                    payload: response.data.musics,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            dispatch({ type: MUSICS_LOADED_FAIL });\r\n        }\r\n    };\r\n\r\n    // music context data\r\n    const musicContextData = {\r\n        musicState,\r\n        getMusics,\r\n    };\r\n    return ( <\r\n        MusicContext.Provider value = { musicContextData } > { \" \" } { children } { \" \" } <\r\n        /MusicContext.Provider>\r\n    );\r\n};\r\n\r\nexport default MusicContextProvider;"]},"metadata":{},"sourceType":"module"}