{"ast":null,"code":"var _jsxFileName = \"F:\\\\Greenwich\\\\Greenwich\\\\Topup\\\\Final\\\\Social media final project\\\\Frontend\\\\src\\\\contexts\\\\userContext.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useReducer } from \"react\";\nimport { userReducer } from \"../reducers/userReducer\";\nimport { apiUrl, UPDATE_USER } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\nconst UserContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // State\n  const [userState, dispatch] = useReducer(userReducer, {\n    user: null,\n    users: [],\n    usesLoading: true\n  }); // Update post\n\n  const updateUser = async updatedUser => {\n    try {\n      const response = await axios.put(`${apiUrl}/update/user/${updatedUser._id}`, updatedUser);\n\n      if (response.data.success) {\n        dispatch({\n          type: UPDATE_USER,\n          payload: response.data.user\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.response.data : {\n        success: false,\n        message: \"Server error\"\n      };\n    }\n  }; // user context data\n\n\n  const userContextData = {\n    userState,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userContextData,\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserContextProvider, \"b5haK+8uZ4Qsg1FglGCjwTmNUzo=\");\n\n_c = UserContextProvider;\nexport default UserContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"sources":["F:/Greenwich/Greenwich/Topup/Final/Social media final project/Frontend/src/contexts/userContext.js"],"names":["axios","createContext","useReducer","userReducer","apiUrl","UPDATE_USER","UserContext","UserContextProvider","children","userState","dispatch","user","users","usesLoading","updateUser","updatedUser","response","put","_id","data","success","type","payload","error","message","userContextData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,aAApC;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;;AAEP,MAAMM,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBR,UAAU,CAACC,WAAD,EAAc;AACpDQ,IAAAA,IAAI,EAAE,IAD8C;AAEpDC,IAAAA,KAAK,EAAE,EAF6C;AAGpDC,IAAAA,WAAW,EAAE;AAHuC,GAAd,CAAxC,CAF4C,CAO5C;;AACA,QAAMC,UAAU,GAAG,MAAOC,WAAP,IAAuB;AACxC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CACpB,GAAEb,MAAO,gBAAeW,WAAW,CAACG,GAAI,EADpB,EAErBH,WAFqB,CAAvB;;AAIA,UAAIC,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACzBV,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAEhB,WAAR;AAAqBiB,UAAAA,OAAO,EAAEN,QAAQ,CAACG,IAAT,CAAcR;AAA5C,SAAD,CAAR;AACA,eAAOK,QAAQ,CAACG,IAAhB;AACD;AACF,KATD,CASE,OAAOI,KAAP,EAAc;AACd,aAAOA,KAAK,CAACP,QAAN,CAAeG,IAAf,GACHI,KAAK,CAACP,QAAN,CAAeG,IADZ,GAEH;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,OAAO,EAAE;AAA3B,OAFJ;AAGD;AACF,GAfD,CAR4C,CAyB5C;;;AACA,QAAMC,eAAe,GAAG;AACtBhB,IAAAA,SADsB;AAEtBK,IAAAA;AAFsB,GAAxB;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEW,eAA7B;AAAA,eACG,GADH,EAEGjB,QAFH,EAEa,GAFb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CApCD;;GAAMD,mB;;KAAAA,mB;AAsCN,eAAeA,mBAAf","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useReducer } from \"react\";\r\nimport { userReducer } from \"../reducers/userReducer\";\r\nimport { apiUrl, UPDATE_USER } from \"./constants\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nconst UserContextProvider = ({ children }) => {\r\n  // State\r\n  const [userState, dispatch] = useReducer(userReducer, {\r\n    user: null,\r\n    users: [],\r\n    usesLoading: true,\r\n  });\r\n  // Update post\r\n  const updateUser = async (updatedUser) => {\r\n    try {\r\n      const response = await axios.put(\r\n        `${apiUrl}/update/user/${updatedUser._id}`,\r\n        updatedUser\r\n      );\r\n      if (response.data.success) {\r\n        dispatch({ type: UPDATE_USER, payload: response.data.user });\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      return error.response.data\r\n        ? error.response.data\r\n        : { success: false, message: \"Server error\" };\r\n    }\r\n  };\r\n\r\n  // user context data\r\n  const userContextData = {\r\n    userState,\r\n    updateUser,\r\n  };\r\n  return (\r\n    <UserContext.Provider value={userContextData}>\r\n      {\" \"}\r\n      {children}{\" \"}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}